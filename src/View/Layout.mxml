<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:View="View.*"
		 xmlns:Notification="View.components.Notification.*"
		 xmlns:Component="View.components.*" xmlns:components="View.ERA.components.*">

	<fx:Script>
		<![CDATA[
			import Controller.IDEvent;
			import Controller.Utilities.Auth;
			
			import Model.Model_ERANotification;
			
			import View.ERA.components.NotificationListItem;
			
			import mx.controls.HRule;
			import mx.controls.Text;
			
			import spark.components.Label;
			
			public function allProgressEvents(percentage:Number, evidenceID:Number):void {
				var progressEvent:IDEvent = new IDEvent(IDEvent.ERA_PROGRESS_EVENT, true);
				progressEvent.data.percentage = percentage;
				progressEvent.data.evidenceID = evidenceID;
				dispatchEvent(progressEvent);
			}
			
			public function allCompleteEvents(status:Boolean, evidenceID:Number=0, dataFileID:Number=0):void {
				if(!status) {
					notificationBar.showGood("Upload Failed");
					return;
				}
					
				notificationBar.showGood("Upload Complete");

				var progressEvent:IDEvent = new IDEvent(IDEvent.ERA_COMPLETE_EVENT, true);
				progressEvent.data.evidenceID = evidenceID;
				progressEvent.data.fileID = dataFileID;
				dispatchEvent(progressEvent);
			}
			
			public function addNotifications(notificationsArray:Array):void {
				
				notificationList.removeAllElements();
				
				showAllNotificationsButton.visible = false;
				showAllNotificationsButton.includeInLayout = false;
				
				for each(var notificationData:Model_ERANotification in notificationsArray) {
//					if(notificationData.username == Auth.getInstance().getUsername()) continue;
					
					var notification:NotificationListItem = new NotificationListItem();
					notification.notificationData = notificationData;
					notificationList.addElement(notification);
					
					// make it invisible by default if its read
					if(notification.isRead()) {
						notification.visible = false;
						notification.includeInLayout = false;
					}
				}
				
				// make sure only the 'unread' button is clicked
				showAllButton.selected = false;
				showReadButton.selected = false;
				showUnreadButton.selected = true;
				
				notificationFilterButton.visible = true;
				notificationFilterButton.includeInLayout = true;
				
				trace("dispatching era notification event");
				var notificationUpdatedEvent:IDEvent = new IDEvent(IDEvent.ERA_NOTIFICATIONS_UPDATED, true);
				dispatchEvent(notificationUpdatedEvent);
			}
			
			public function showAllNotifications():void {
				
				showAllNotificationsButton.visible = false;
				showAllNotificationsButton.includeInLayout = false;
				
				notificationFilterButton.visible = true;
				notificationFilterButton.includeInLayout = true;
				
				
				showAllButton.selected = true;
				showAllButton_changeHandler();
			}
			
			public function filterRoomNotifications(roomID:Number):void {
				
				if(notificationPanel.visible) {
					notificationPanel.visible = false;
					return;
				}
				
				notificationPanel.visible = true;
				showAllNotificationsButton.visible = true;
				showAllNotificationsButton.includeInLayout = true;
				notificationFilterButton.visible = false;
				notificationFilterButton.includeInLayout = false;
				
				for(var i:Number = 0; i < notificationList.numElements; i++) {
					var notificationListItem:NotificationListItem = notificationList.getElementAt(i) as NotificationListItem;
					
					if(notificationListItem.isRead()) {
						notificationListItem.visible = false;
						notificationListItem.includeInLayout = false;
						continue;
					}
					if(notificationListItem.notificationData.room) { 
						if(notificationListItem.notificationData.room.base_asset_id != roomID) {
							notificationListItem.visible = false;
							notificationListItem.includeInLayout = false;
						} else {
							notificationListItem.visible = true;
							notificationListItem.includeInLayout = true;
						}
					}
				}
			}
			
			public function filterCaseNotifications(caseID:Number):void {
				
				if(notificationPanel.visible) {
					notificationPanel.visible = false;
					return;
				}
				
				notificationPanel.visible = true;
				showAllNotificationsButton.visible = true;
				showAllNotificationsButton.includeInLayout = true;
				notificationFilterButton.visible = false;
				notificationFilterButton.includeInLayout = false;
				
				for(var i:Number = 0; i < notificationList.numElements; i++) {
					var notificationListItem:NotificationListItem = notificationList.getElementAt(i) as NotificationListItem;
					
					if(notificationListItem.isRead()) {
						notificationListItem.visible = false;
						notificationListItem.includeInLayout = false;
						continue;
					}
					
					if(notificationListItem.notificationData.eraCase) { 
						if(notificationListItem.notificationData.eraCase.base_asset_id != caseID) {
							notificationListItem.visible = false;
							notificationListItem.includeInLayout = false;
						} else {
							notificationListItem.visible = true;
							notificationListItem.includeInLayout = true;
						}
					}
				}
			}
			
			public function filterFileNotifications(fileID:Number):void {
				
				if(notificationPanel.visible) {
					notificationPanel.visible = false;
					return;
				}
				
				notificationPanel.visible = true;
				showAllNotificationsButton.visible = true;
				showAllNotificationsButton.includeInLayout = true;
				notificationFilterButton.visible = false;
				notificationFilterButton.includeInLayout = false;
				
				for(var i:Number = 0; i < notificationList.numElements; i++) {
					var notificationListItem:NotificationListItem = notificationList.getElementAt(i) as NotificationListItem;
					
					if(notificationListItem.isRead()) {
						notificationListItem.visible = false;
						notificationListItem.includeInLayout = false;
						continue;
					}
					
					if(notificationListItem.notificationData.file) { 
						if(notificationListItem.notificationData.file.base_asset_id != fileID) {
							notificationListItem.visible = false;
							notificationListItem.includeInLayout = false;
						} else {
							notificationListItem.visible = true;
							notificationListItem.includeInLayout = true;
						}
					} else {
						notificationListItem.visible = false;
						notificationListItem.includeInLayout = false;
					}
						
				}
			}

			protected function label1_clickHandler(event:MouseEvent):void
			{
				showAllNotifications();
			}


			protected function showReadButton_changeHandler(event:Event):void
			{
				if(!showReadButton.selected) {
					// the button has been un selected,
					// so lets switch it to show all
					showAllButton.selected = true;
					showAllButton_changeHandler();
					return;
				}
				
				
				showAllButton.selected = false;
				showUnreadButton.selected = false;
				
				for(var i:Number = 0; i < notificationList.numElements; i++) {
					var notificationListItem:NotificationListItem = notificationList.getElementAt(i) as NotificationListItem;
					if(notificationListItem.isRead()) {
						notificationListItem.visible = true;
						notificationListItem.includeInLayout = true;
					} else {
						notificationListItem.visible = false;
						notificationListItem.includeInLayout = false;
					}
				}
			}


			protected function showUnreadButton_changeHandler(event:Event):void
			{
				if(!showUnreadButton.selected) {
					// the button has been un selected,
					// so lets switch it to show all
					showAllButton.selected = true;
					showAllButton_changeHandler();
					return;
				}
				
				
				showAllButton.selected = false;
				showReadButton.selected = false;
				
				for(var i:Number = 0; i < notificationList.numElements; i++) {
					var notificationListItem:NotificationListItem = notificationList.getElementAt(i) as NotificationListItem;
					if(!notificationListItem.isRead()) {
						notificationListItem.visible = true;
						notificationListItem.includeInLayout = true;
					} else {
						notificationListItem.visible = false;
						notificationListItem.includeInLayout = false;
					}
				}
			}


			protected function showAllButton_changeHandler(event:Event=null):void
			{
				if(!showAllButton.selected) {
					// the button has been un selected,
					// make it so that you cant unselect it
					showAllButton.selected = true;
					return;
				}
				
				// Turn off other buttons
				showReadButton.selected = false;
				showUnreadButton.selected = false;
				
				// Make all visible
				for(var i:Number = 0; i < notificationList.numElements; i++) {
					var notificationListItem:NotificationListItem = notificationList.getElementAt(i) as NotificationListItem;
					notificationListItem.visible = true;
					notificationListItem.includeInLayout = true;
				}
			}

		]]>
	</fx:Script>

	<fx:Declarations>
		<s:Fade duration="200" alphaFrom="0" alphaTo="1" id="fadeIn" />   
		<s:Fade duration="200" alphaFrom="1" alphaTo="0" id="fadeOut" />		
	</fx:Declarations>
	
	<!-- Header -->
	<s:VGroup width="100%" height="100%" gap="0">
		<View:Header id="header" visible="false" includeInLayout="false"></View:Header>
		<s:Group width="100%"  height="100%">
			<s:Group id="content" width="100%" height="100%"></s:Group>
			<components:NotificationBar id="notificationBar" />
		</s:Group>

	</s:VGroup> 
	
	<s:BorderContainer backgroundColor="0xFFFFFF"
					   id="notificationPanel"
					   top="{header.height + 10}"
					   right="20"
					   width="350" visible="false"
					   maxHeight="500" showEffect="{fadeIn}" hideEffect="{fadeOut}" resizeEffect="Resize"
					   borderVisible="false">
		<s:VGroup width="100%" height="100%" gap="0">
			<s:HGroup id="notificationFilterButton" verticalAlign="middle" paddingBottom="15" paddingLeft="15" paddingRight="15" paddingTop="15" width="100%">
				<s:Label text="Show:" />
				<s:ToggleButton id="showAllButton" label="All" cornerRadius="10" selected="true" width="100%" change="showAllButton_changeHandler(event)" />
				<s:ToggleButton id="showUnreadButton" label="Unread" cornerRadius="10" width="100%" change="showUnreadButton_changeHandler(event)"/>
				<s:ToggleButton id="showReadButton" label="Read" cornerRadius="10" width="100%" change="showReadButton_changeHandler(event)" />
			</s:HGroup>
			<s:VGroup paddingBottom="10" paddingTop="15" id="showAllNotificationsButton" visible="false" includeInLayout="false" width="100%">
				<s:Label width="100%" textAlign="center" text="Show All Notifications" color="0x0000FF" click="label1_clickHandler(event)" />	
			</s:VGroup>
			<s:Scroller width="100%" height="100%">
				<s:VGroup id="notificationList" width="100%" height="100%" gap="0"/>
			</s:Scroller>	
		</s:VGroup>
		<s:filters>
			<s:DropShadowFilter distance="3" angle="0" alpha="0.5" color="0x000000" blurX="20" blurY="20"/>
		</s:filters>
	</s:BorderContainer>

</s:Group>