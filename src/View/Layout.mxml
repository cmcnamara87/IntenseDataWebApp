<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:View="View.*"
		 xmlns:Notification="View.components.Notification.*"
		 xmlns:Component="View.components.*" xmlns:components="View.ERA.components.*" creationComplete="group1_creationCompleteHandler(event)">

	<fx:Script>
		<![CDATA[
			import Controller.AppController;
			import Controller.IDEvent;
			import Controller.Utilities.Auth;
			
			import Model.Model_ERANotification;
			
			import View.ERA.components.NotificationListItem;
			import View.components.IDGUI;
			
			import mx.controls.HRule;
			import mx.controls.Text;
			import mx.events.FlexEvent;
			
			import spark.components.Label;
			
			
			private var lastFilteredByID:Number = 0;
			
			// notification array for temporary rending
			private var keepAdding:Boolean = true;
			private var notificationArray:Array = null;
			private var notificationCounter:Number = 0;
			private var renderNumber:Number = 1; // how many notifications to render at a time
			
			private const ALL_NOTIFICATIONS = "all_notifications";
			private const NEW_NOTIFICATIONS = "new_notifications";
			private const READ_NOTIFICATIONS = "read_notifications";
			
			private var notificationMode = NEW_NOTIFICATIONS;
			
			public function allProgressEvents(percentage:Number, evidenceID:Number):void {
				var progressEvent:IDEvent = new IDEvent(IDEvent.ERA_PROGRESS_EVENT, true);
				progressEvent.data.percentage = percentage;
				progressEvent.data.evidenceID = evidenceID;
				dispatchEvent(progressEvent);
			}
			
			public function allCompleteEvents(status:Boolean, evidenceID:Number=0, dataFileID:Number=0):void {
				if(!status) {
					notificationBar.showGood("Upload Failed");
					return;
				}
					
				notificationBar.showGood("Upload Complete");

				var progressEvent:IDEvent = new IDEvent(IDEvent.ERA_COMPLETE_EVENT, true);
				progressEvent.data.evidenceID = evidenceID;
				progressEvent.data.fileID = dataFileID;
				dispatchEvent(progressEvent);
			}

			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				trace("&&&&&&&&notification button", AppController.layout.header.notificationButton.x);
				trace("&&&&&&&&local", IDGUI.localToLocal(AppController.layout.header, AppController.layout, new Point(AppController.layout.header.notificationButton.x, 0)).x);
				
			}

		]]>
	</fx:Script>

	<fx:Declarations>
		<s:Fade duration="200" alphaFrom="0" alphaTo="1" id="fadeIn" />   
		<s:Fade duration="200" alphaFrom="1" alphaTo="0" id="fadeOut" />
		<s:DropShadowFilter id="shadowy" distance="8" angle="90" color="0x000000" alpha="0.2" blurX="8" blurY="8" inner="true"/>
		
	</fx:Declarations>
	
	<!-- Header -->
	<s:VGroup width="100%" height="100%" gap="0">
		<View:Header id="header" visible="false" includeInLayout="false"></View:Header>
		<s:Group width="100%"  height="100%">
			<s:Group id="content" width="100%" height="100%"></s:Group>
			<components:NotificationBar id="notificationBar" />
		</s:Group>

	</s:VGroup> 
	
	<components:NotificationPanel id="notificationPanel" top="{header.height + 10}" >
	</components:NotificationPanel>

</s:Group>