<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  horizontalAlign="center" gap="15"
		  buttonMode="true"
		  dragEnter="vgroup1_dragEnterHandler(event)"
		  dragDrop="vgroup1_dragDropHandler(event)"
		  dragExit="vgroup1_dragExitHandler(event)"
		  alpha="{selected ? 1 : 0.5}" xmlns:components="View.ERA.components.*"
		  creationComplete="vgroup1_creationCompleteHandler(event)"
		  removedFromStage="vgroup1_removedFromStageHandler(event)"
		  mouseOver="vgroup1_mouseOverHandler(event)"
		  mouseOut="vgroup1_mouseOutHandler(event)"
		  >

	<fx:Script>
		<![CDATA[
			import Controller.AppController;
			import Controller.ERA.CaseController;
			import Controller.IDEvent;
			import Controller.Utilities.AssetLookup;
			import Controller.Utilities.Auth;
			
			import Model.Model_ERARoom;
			
			import mx.controls.Alert;
			import mx.core.IUIComponent;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			
			import spark.components.TileGroup;
			
			[Bindable]
			public var roomName:String = "";
			[Bindable]
			private var _roomType:String = "";
			
			private var _roomData:Model_ERARoom;
			
			[Bindable]
			private var notificationCount:Number = 0;

			[Bindable]
			public var unavailable:Boolean = false;
			
			[Bindable]
			public var selected:Boolean = false;
			
			[Bindable]
			private var hasEvidence:Boolean = false;
			
			[Bindable]
			private var evidenceCount:Number = 0;
			
			public function set roomType(roomType:String) {
				this._roomType = roomType;
				iconImage.source = AssetLookup.getRoomIcon(roomType, false);
			}
			public function get roomType():String {
				return _roomType;
			}
			
			public function set roomData(roomData:Model_ERARoom):void {
				this._roomData = roomData;
				
				notificationCount = roomData.notificationCount;
				
				this.evidenceCount = roomData.evidenceCount;
				renderEvidenceCount();
			}
			
			public function decreaseEvidenceCount():void {
				this.evidenceCount--;
				trace("increasing", evidenceCount);
				renderEvidenceCount();
			}
			public function increaseEvidenceCount():void {
				this.evidenceCount++;
				trace("increasing", evidenceCount);
				renderEvidenceCount();
			}
			
			private function renderEvidenceCount():void {
				if(this.evidenceCount > 0) {
					//hasEvidence = true;
					trace("rendering");
					iconImage.source = AssetLookup.getRoomIcon(roomType, true);
					iconImage.filters = new Array(darkFilter);
				} else {
					iconImage.source = AssetLookup.getRoomIcon(roomType, false);
					iconImage.filters = new Array(regularFilter);
				}
			}
			
						
			protected function vgroup1_dragDropHandler(event:DragEvent):void
			{
				var fileMoveEvent:IDEvent = new IDEvent(IDEvent.ERA_MOVE_FILE, true);
				fileMoveEvent.data.fileID = (event.dragInitiator as FileTile).fileID;
				fileMoveEvent.data.moveToRoomType = this._roomType;
				fileMoveEvent.data.hot = (event.dragInitiator as FileTile).hot
				this.dispatchEvent(fileMoveEvent);
				
				(event.dragInitiator.parent as TileGroup).removeElement(event.dragInitiator as FileTile);
				
				this.alpha = 0.5;
				
				this.increaseEvidenceCount();
			}


			protected function vgroup1_dragEnterHandler(event:DragEvent):void
			{
				// make it so that you cannot drag items into the evidence manager, or evidence box, or exhibition
				if(	_roomType == Model_ERARoom.EVIDENCE_MANAGEMENT || _roomType == Model_ERARoom.EVIDENCE_ROOM || _roomType == Model_ERARoom.POST_MORTEM || _roomType == Model_ERARoom.EXHIBIT) return;
				
				// make it so you cant drag into the one you are currently in (its selected)
				if(selected) return;
				
				// make it so that only the production manager or sys admin can move files between the forensic lab, exhibition and screenning room
				if(!CaseController.isProductionManager && !Auth.getInstance().isSysAdmin()) {
					if(_roomType == Model_ERARoom.FORENSIC_LAB || _roomType == Model_ERARoom.SCREENING_ROOM || _roomType == Model_ERARoom.EXHIBIT) return;
				}
				
				// make it so only the sys admin can move files to the exhibition
				if(!Auth.getInstance().isSysAdmin()) {
					if(_roomType == Model_ERARoom.EXHIBIT) return;
				}
				
				
				DragManager.acceptDragDrop(event.currentTarget as IUIComponent);
				DragManager.showFeedback( DragManager.MOVE );
				
				this.alpha = 1;
			}


			protected function vgroup1_dragExitHandler(event:DragEvent):void
			{
				this.alpha = 0.5
			}


			protected function vgroup1_creationCompleteHandler(event:FlexEvent):void
			{
				AppController.layout.notificationPanel.addEventListener(IDEvent.ERA_NOTIFICATIONS_UPDATED, eraNotificationsUpdated, false, 0, true);
			}
			
			private function eraNotificationsUpdated(e:Event):void {
				if(!_roomData) return; // we havnet set any room data info yet
				_roomData.updateNotificationCount();
				this.notificationCount = _roomData.notificationCount;
//				trace("Updating Room", roomName, "notification count", this.notificationCount);
				notificationBadge.notificationCount = this.notificationCount;
			}

			protected function vgroup1_removedFromStageHandler(event:Event):void
			{
				AppController.layout.notificationPanel.removeEventListener(IDEvent.ERA_NOTIFICATIONS_UPDATED, eraNotificationsUpdated);
				this.removeEventListener(Event.REMOVED_FROM_STAGE, vgroup1_removedFromStageHandler);
				
				trace("CLEAR: Removing Room Icon");
				roomName = null;
				_roomType = null;
				_roomData = null;
				notificationCount = null;
				evidenceCount = null;
				
				
			}


			protected function vgroup1_clickHandler(event:MouseEvent):void
			{
				switch(_roomType) {
					case Model_ERARoom.EVIDENCE_MANAGEMENT:
						var showEvidenceManagementEvent:IDEvent = new IDEvent(IDEvent.ERA_SHOW_EVIDENCE_MANAGEMENT, true);
						this.dispatchEvent(showEvidenceManagementEvent);
						break;
					case Model_ERARoom.EVIDENCE_ROOM:
						var showEvidenceBoxEvent:IDEvent = new IDEvent(IDEvent.ERA_SHOW_EVIDENCE_BOX, true);
						this.dispatchEvent(showEvidenceBoxEvent);
						break;
					case Model_ERARoom.FORENSIC_LAB:
						var showForensicLabEvent:IDEvent = new IDEvent(IDEvent.ERA_SHOW_FORENSIC_LAB, true);
						this.dispatchEvent(showForensicLabEvent);
						break;
					case Model_ERARoom.SCREENING_ROOM:
						var showScreeningLabEvent:IDEvent = new IDEvent(IDEvent.ERA_SHOW_SCREENING_LAB, true);
						this.dispatchEvent(showScreeningLabEvent);
						break;
					case Model_ERARoom.EXHIBIT:
						var showExhibition:IDEvent = new IDEvent(IDEvent.ERA_SHOW_EXHIBITION, true);
						this.dispatchEvent(showExhibition);
						break;
					default:
						break;
				}
			}


			protected function notificationBadge_clickHandler(event:MouseEvent):void
			{
				// Show notifications in the notification panel (filters to only show ones relating to this object)
				AppController.layout.notificationPanel.filterNotifications(this._roomData.base_asset_id);
			}

			protected function vgroup1_mouseOverHandler(event:MouseEvent):void
			{
				if(evidenceCount) {
					iconImage.filters = new Array(mouseOverBlue);
				} else {
					iconImage.filters = new Array(mouseOver);
				}
				
				roomLabel.setStyle("textDecoration", "underline");
			}
			
			protected function vgroup1_mouseOutHandler(event:MouseEvent):void
			{
				if(evidenceCount > 0) {
					iconImage.filters = new Array(darkFilter);
				} else {
					iconImage.filters = new Array(regularFilter);
				}
				
				if(!selected) {
					roomLabel.setStyle("textDecoration", "none");
				}
			}
			
		]]>
	</fx:Script>

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:DropShadowFilter id="regularFilter" distance="-1" angle="270" color="0xDDDDDD" alpha="0.8" blurX="0" blurY="0"/>
		<s:DropShadowFilter id="darkFilter" distance="1" angle="270" color="0x000000" alpha="0.8" blurX="0" blurY="0"/>
		<s:DropShadowFilter id="mouseOver" distance="0" angle="0" color="0xFFFFFF" alpha="0.8" blurX="10" blurY="10" />
		<s:DropShadowFilter id="mouseOverBlue" distance="0" angle="0" color="0x000000" alpha="0.8" blurX="10" blurY="10" />
	</fx:Declarations>
	<s:Group width="70" height="70">
		
		<mx:Image id="iconImage" width="48" height="50" horizontalAlign="center" maintainAspectRatio="true" verticalAlign="middle" horizontalCenter="0" verticalCenter="0" filters="{(evidenceCount>0) ? darkFilter : regularFilter}" click="vgroup1_clickHandler(event)">
		</mx:Image>
		
		<s:Label x="18" text="x" fontSize="70" fontWeight="bold" color="0xFF0000"  visible="{unavailable}" includeInLayout="{unavailable}"/>
		<components:NotificationBadge id="notificationBadge" top="-0" left="50" notificationCount="{notificationCount}" click="notificationBadge_clickHandler(event)"/>
	 </s:Group>
	<!--<s:Group width="70" height="70">		
		<s:BorderContainer backgroundColor="0x434343" borderVisible="false" height="70" width="70" visible="true" includeInLayout="true">
			<s:Label x="18" text="x" fontSize="70" fontWeight="bold" color="0xFF0000" visible="{unavailable}" includeInLayout="{unavailable}"/>
			<s:VGroup width="100%" height="100%" horizontalAlign="center">
					
			</s:VGroup>
			<s:filters>
				<s:DropShadowFilter distance="1" angle="90" color="0xFFFFFF" blurX="0" blurY="0"/>
			</s:filters>
		</s:BorderContainer>
		
		
	</s:Group>-->
	
	<s:Label id="roomLabel" text="{roomName}" textDecoration="{selected ? 'underline' : 'none'}" fontSize="15" color="0xcfcfcf" width="100%" textAlign="center" click="vgroup1_clickHandler(event)">
		<s:filters>
			<s:DropShadowFilter distance="1" angle="270" color="0x000000" blurX="0" blurY="0"/>
		</s:filters>
	</s:Label>
</s:VGroup>
