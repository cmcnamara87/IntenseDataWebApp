<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%"
		 creationComplete="vgroup1_creationCompleteHandler(event)"
		 removedFromStage="vgroup1_removedFromStageHandler(event)">

	<fx:Script>
		<![CDATA[
			import Controller.AppController;
			import Controller.IDEvent;
			
			import Model.Model_ERAUser;
			
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			public var role:String = "";
			
			private var allERAUsers:Array;
			private var userArray:Array;
			
			public function addAllUsers(allERAUsers:Array):void {
				this.allERAUsers = allERAUsers;
				var projectArray:ArrayCollection = new ArrayCollection();
				for each(var eraUser:Model_ERAUser in allERAUsers) {
					var object:Object = new Object();
					object.label = eraUser.lastName + ", " + eraUser.firstName + " (" + eraUser.username + ")";
					object.data = eraUser;
					projectArray.addItem(object);
				}
				allUsers.dataProvider = projectArray;
			}
			
			/**
			 * Makes sure we dont have an users added that no longer exist
			 */
			public function update():void {
				for(var i:Number = 0; i < userArray.length; i++) {
					var roleUser:Model_ERAUser = userArray[i] as Model_ERAUser;
					var found:Boolean = false;
					
					for each (var eraUser:Model_ERAUser in allERAUsers) {
						if(roleUser.username == eraUser.username) found = true;
					}
					if(found == false) {
						userArray.splice(i, 1);
						userlistDisplay();
					}
				}
			}
			
			public function addUserWithRole(user:Model_ERAUser):void {
				userArray.push(user);
				userlistDisplay();
			}
			/**
			 * Adds a list of users that have the set role
			 * @param userArray	The list of users (all model_erauser)
			 */
			public function addUsersWithRole(userArray:Array):void {
				// Save the user array (so we can update it later if need be)
				this.userArray = userArray;
				userlistDisplay();
			}
			
			private function userlistDisplay():void {
				currentUsers.removeAllElements();
				
				for each(var user:Model_ERAUser in userArray) {
					var userListItem:UserRoleItem = new UserRoleItem();
					userListItem.username = user.username;
					userListItem.firstName = user.firstName;
					userListItem.lastName = user.lastName;
					userListItem.roleComponent = this;
					userListItem.role = role;
					userListItem.deleteEventToThrow = IDEvent.ERA_REMOVE_USER_FROM_ROLE;
					currentUsers.addElement(userListItem);
				}
			}
			
			public function removeUser(username:String):void {
				for(var i:Number = 0; i < userArray.length; i++) {
					var roleUser:Model_ERAUser = userArray[i] as Model_ERAUser;
					if(roleUser.username == username) {
						userArray.splice(i, 1);
						addUsersWithRole(userArray);
						break;
					}
				}
			}
			
			protected function addUserButton_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if(allUsers.selectedIndex == -1) return;
				
				addUserButton.setStyle("chromeColor", 0xCCCCCC);
				
				var addUserToRole:IDEvent = new IDEvent(IDEvent.ERA_ADD_USER_TO_ROLE, true);
				addUserToRole.data.eraUserData = allUsers.selectedItem.data;
				addUserToRole.data.role = role;
				addUserToRole.data.roleComponent = this;
				this.dispatchEvent(addUserToRole);	
				
				// Clear the dropdown
				allUsers.selectedIndex = -1;
			}

			protected function allUsers_changeHandler(event:IndexChangeEvent):void
			{
				// TODO Auto-generated method stub
				addUserButton.setStyle("chromeColor", 0x8FAFF7);
			}

			protected function email_changeHandler(event:Event):void
			{
				trace("EMAIL CHANGLED to", this.emailCheckbox.selected ? "true":"false", "number of users",currentUsers.numElements);
				for(var i:Number = 0; i < currentUsers.numElements; i++) {
					var userRoleItem:UserRoleItem = currentUsers.getElementAt(i) as UserRoleItem;
					trace("changing current users to", this.emailCheckbox.selected ? "true" : "false");
					userRoleItem.email.selected = this.emailCheckbox.selected;
				}
				
				
				// create a new event to sve the change
				var changeEmailNotification:IDEvent = new IDEvent(IDEvent.ERA_CHANGE_ERA_EMAIL_OPTIONS, true);
				changeEmailNotification.data.role = role;
				changeEmailNotification.data.enabled = emailCheckbox.selected;
				dispatchEvent(changeEmailNotification);
			}

			protected function vgroup1_creationCompleteHandler(event:FlexEvent):void
			{
				trace("*ESFJESDKJSDGJIDSGS");

				this.addEventListener(IDEvent.ERA_CHANGE_ERA_EMAIL_OPTIONS_USER, changingUserEmailOptions);
			}
			private function changingUserEmailOptions(e:IDEvent):void {
				trace("got email user options");
				// do we have all the role set to 'on'
				if(emailCheckbox.selected == false) {
					// its just a regular user one, lets send it the way we always have done it
					// pass it up
					var changeEmailNotification:IDEvent = new IDEvent(IDEvent.ERA_CHANGE_ERA_EMAIL_OPTIONS, true);
					changeEmailNotification.data.role = role;
					changeEmailNotification.data.enabled = e.data.enabled;
					changeEmailNotification.data.username = e.data.username;
					dispatchEvent(changeEmailNotification);
					
				} else if(emailCheckbox.selected && e.data.enabled == false) {
					// this is the sepcial case, when we need to serialize turning on a whole bunch of user ones
					// cause we are removing 
					// turn off the 'all email' checkbox, since thats no longer true
					emailCheckbox.selected = false;
					
					trace("deselecting the one while role is on");
					// lets get all the users
					var usernameArray:Array = new Array();
					for(var i:Number = 0; i < currentUsers.numElements; i++) {
						var userRoleItem:UserRoleItem = currentUsers.getElementAt(i) as UserRoleItem;
						if(userRoleItem.username != e.data.username) {
							usernameArray.push(userRoleItem.username);
						}
					}
					
					var changeEmailNotification:IDEvent = new IDEvent(IDEvent.ERA_CHANGE_ERA_EMAIL_OPTIONS_ARRAY, true);
					changeEmailNotification.data.role = role;
					changeEmailNotification.data.usernameArray = usernameArray;
					dispatchEvent(changeEmailNotification);	
					
					
				}
			}			
			
			protected function vgroup1_removedFromStageHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				this.removeEventListener(FlexEvent.CREATION_COMPLETE, vgroup1_creationCompleteHandler);
				this.removeEventListener(Event.REMOVED_FROM_STAGE, vgroup1_removedFromStageHandler);
			}
			
		]]>
	</fx:Script>

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:HGroup width="100%">
		<s:Label id="roleTitle" text="{Model_ERAUser.getRolePrettyName(role)}" fontSize="15" fontWeight="bold" color="0x5e6469" width="100%">
		</s:Label>
		<mx:CheckBox id="emailCheckbox" labelPlacement="right" label="Enable Email" change="email_changeHandler(event)" selected="{AppController.currentEraProject.isEmailEnabled(role)}" />
	</s:HGroup>
	<s:Label text="{Model_ERAUser.getRoleDescription(role)}" color="0x5e6469" />
	<s:HGroup width="100%" paddingTop="5">
		<s:DropDownList id="allUsers" width="100%" change="allUsers_changeHandler(event)">
		</s:DropDownList>
		<s:Button label="Assign Role" id="addUserButton" click="addUserButton_clickHandler(event)" width="85">
		</s:Button>
		<s:Group width="92">
		</s:Group>
	</s:HGroup>
	<s:VGroup id="currentUsers" width="100%" paddingTop="10" resizeEffect="Resize">
	</s:VGroup>
	<mx:HRule chromeColor="0x000000" width="100%" />
</s:VGroup>
