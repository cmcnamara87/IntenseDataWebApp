<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="View.ERA.components.*"  gap="0"
		  creationComplete="vgroup1_creationCompleteHandler(event)"
		  removedFromStage="vgroup1_removedFromStageHandler(event)"
		 >

	<fx:Script>
		<![CDATA[
			import Controller.AppController;
			import Controller.IDEvent;
			import Controller.Utilities.AssetLookup;
			
			import Model.AppModel;
			import Model.Model_Base;
			import Model.Model_ERAFile;
			import Model.Model_ERALogItem;
			import Model.Model_ERARoom;
			
			import flashx.textLayout.tlf_internal;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import spark.components.Group;
			private var fileReference:FileReference;
			
			private var logItem:Model_ERALogItem;
			public var allLogItemsArray2:Array = new Array();
			
			/*================================ EVENT LISTENERS ============================== */
			
			public function getID():Number {
				if(logItem == null) return 0;
				return logItem.base_asset_id;
			}
			/**
			 * The Upload button was clicked.
			 */
			protected function uploadButton_clickHandler(event:MouseEvent):void
			{
				if(logItem.uploaded) {
					var showFileEvent:IDEvent = new IDEvent(IDEvent.ERA_SHOW_FILE, true);
					showFileEvent.data.fileID = logItem.dataItemID;
					showFileEvent.data.roomType = Model_ERARoom.EVIDENCE_ROOM;
					dispatchEvent(showFileEvent);
					return;
				}
				
				fileReference = new FileReference();
				
//				var typeArray:Array = AssetLookup.getFileFilter(logItem.type);
//				trace("asset lookup type", typeArray[0]);
//				fileReference.browse(typeArray);
				fileReference.browse(AssetLookup.getFileTypes());
				fileReference.addEventListener(Event.SELECT, onFileSelect);
				fileReference.addEventListener(Event.CANCEL, fileSelectCancelled);

				uploadButton.label = "Uploading...";
				uploadButton.enabled = false;
			}
			
			private function fileSelectCancelled(e:Event):void {
				uploadButton.label = "Upload";
				uploadButton.enabled = true;
			}
			/**
			 * A file for upload was selected
			 */
			private function onFileSelect(e:Event):void {
//				uploadProgress.includeInLayout = true;
				uploadProgress.visible = true;
				
				var uploadEvent:IDEvent = new IDEvent(IDEvent.ERA_SAVE_FILE, true);
				uploadEvent.data.type = evidenceType.selectedItem;
				uploadEvent.data.title = title.text;
				uploadEvent.data.version = 0;
				uploadEvent.data.description = description.text;
				uploadEvent.data.evidenceItem = this;
				uploadEvent.data.fileReference = fileReference;
				uploadEvent.data.logItemID = logItem.base_asset_id;
				
				uploadButton.enabled = false;
				
				dispatchEvent(uploadEvent);
//				AppModel.getInstance().startFileUpload(dataObject);
			}
			
//			public function showComplete(evidence:Model_ERAFile):void {
//				uploadButton.label = "View";
//				uploadButton.enabled = true;
////				uploadProgress.includeInLayout = false;
//				uploadProgress.visible = false;
//				logItem.uploaded = true;
//				logItem.dataItemID = evidence.base_asset_id;
//			}

			
			private function ioErrorHandler(e:IOError):void {
				
			}
			
			
			/**
			 * The cancel upload button was clicked
			 */
			protected function cancelUploadButton_clickHandler(event:MouseEvent):void
			{
				fileReference.cancel();
				
//				uploadProgress.includeInLayout = false;
				uploadProgress.visible = false;
				
				uploadButton.label = "Upload";
				uploadButton.enabled = true;
				
				
			}

			/**
			 * The useful checkbox was ticked
			 */
			protected function usefulCheckbox_changeHandler(event:Event):void
			{
				if((event.target as CheckBox).selected == true) {
					// The useful box was checked
					processedCheckbox.enabled = true;
					uploadButton.enabled = false;
				} else {
					// The useful box has been unchecked
					processedCheckbox.enabled = false;
					uploadButton.enabled = false;
				}
				
				var usefulEvent:IDEvent = new IDEvent(IDEvent.ERA_UPDATE_LOG, true);
				usefulEvent.data.logItemID = logItem.base_asset_id;
				usefulEvent.data.elementName = Model_ERALogItem.USEFUL;
				usefulEvent.data.value = (event.target as CheckBox).selected;
				usefulEvent.data.evidenceItem = this;
				dispatchEvent(usefulEvent);
			}
			
			protected function processedCheckbox_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if((event.target as CheckBox).selected == true) {
					// The useful box was checked
					uploadButton.enabled = true;
				} else {
					// The useful box has been unchecked
					uploadButton.enabled = false;
				}
				
				var usefulEvent:IDEvent = new IDEvent(IDEvent.ERA_UPDATE_LOG, true);
				usefulEvent.data.logItemID = logItem.base_asset_id;
				usefulEvent.data.elementName = Model_ERALogItem.PROCESSED;
				usefulEvent.data.value = (event.target as CheckBox).selected;
				usefulEvent.data.evidenceItem = this;
				dispatchEvent(usefulEvent);
				
			}


			/**
			 * The save button was clicked
			 */
			protected function saveButton_clickHandler(event:MouseEvent):void
			{
				// Lets check if there is a file with this name already
				trace("save button clicked, ", allLogItemsArray2.length);
				for each(var logItem:Model_ERALogItem in allLogItemsArray2) {
					trace("checking for match", title.text, ":", logItem.title);
					if(logItem.title == title.text) {
						var idErrorEvent:IDEvent = new IDEvent(IDEvent.ERA_ERROR, true);
						idErrorEvent.data.error = "A piece of evidence this name already exists. Please choose a different name.";
						dispatchEvent(idErrorEvent);
						return;
					}
				}
				
				if(evidenceType.selectedIndex == -1) {
					var idErrorEvent:IDEvent = new IDEvent(IDEvent.ERA_ERROR, true);
					idErrorEvent.data.error = "Please select a type for the evidence.";
					dispatchEvent(idErrorEvent);
					return;
				}
				
				if(title.text == "" || title.text == "name") {
					var idErrorEvent:IDEvent = new IDEvent(IDEvent.ERA_ERROR, true);
					idErrorEvent.data.error = "Please enter a name for the Evidence.";
					dispatchEvent(idErrorEvent);
					return;
				}
				
				if(description.text == "" || description.text == "description") {
					var idErrorEvent:IDEvent = new IDEvent(IDEvent.ERA_ERROR, true);
					idErrorEvent.data.error = "Please enter a description for the Evidence.";
					dispatchEvent(idErrorEvent);
					return;
				}
				
				
				// Disable the save button while we save
				saveButton.label = "Saving...";
				saveButton.enabled = false;
				
				// Pass the type, title and description to the controller and this item itself
				var evidenceSavedEvent:IDEvent = new IDEvent(IDEvent.ERA_SAVE_LOG_ITEM, true);
				evidenceSavedEvent.data.type = evidenceType.selectedItem;
				evidenceSavedEvent.data.title = title.text;
				evidenceSavedEvent.data.description = description.text;
				evidenceSavedEvent.data.evidenceItem = this;
				dispatchEvent(evidenceSavedEvent);
			}
			
			public function showCheckBoxes():void {
				saveButton.visible = false;
				saveButton.includeInLayout = false;
				actionGroup.visible = true;
				actionGroup.includeInLayout = true;
			}

			public function addLogItemData(logItem:Model_ERALogItem):void {
				
				// Look to see if the data is already in our array of stored log items
				// if it is, pull it out
				for(var i:Number = 0; i < allLogItemsArray2.length; i++) {
					var searchedLogItems:Model_ERALogItem = allLogItemsArray2[i] as Model_ERALogItem;
					if(logItem.base_asset_id == searchedLogItems.base_asset_id) {
						allLogItemsArray2.splice(i, 1);
					}
				}
				
				// Add the item (only going to be one copy now, because of the lines above);
				allLogItemsArray2.push(logItem);
//				
				
				this.logItem = logItem;
				
				showCheckBoxes();
				
				evidenceType.selectedItem = logItem.type;
				title.text = logItem.title;
				title.setStyle('color', '0x000000');
				description.text = logItem.description;
				description.setStyle('color', '0x000000');
				
				// Disable the text entry boxes, because theyh ave already been saved
				evidenceType.enabled = false;
				title.enabled = false;
				title.setStyle('borderVisible', 'none');
				description.enabled = false;
				description.setStyle('borderVisible', 'none');
				
				usefulCheckbox.selected = logItem.useful;
				if(usefulCheckbox.selected == true) {
					processedCheckbox.enabled = true;
				}
				
				processedCheckbox.selected = logItem.processed;
				if(processedCheckbox.selected == true) {
					uploadButton.enabled = true;
				}
				
				if(logItem.type == "Physical Object") {
					// its a physical object, so you cant upload it
					uploadButton.label = "Disabled";
					uploadButton.enabled = false;
				} else {
					
					if(logItem.uploaded) {
						uploadButton.label = "View";
					} else {
						uploadButton.label = "Upload";
					}
					
				}
				
				
				
				returnedCheckbox.selected = logItem.returned;
				
				if(logItem.returned) {
					collectedCheckbox.enabled = true;
				}
				collectedCheckbox.selected = logItem.collected;
			}

			protected function deleteEvidence_clickHandler(event:MouseEvent):void
			{
				if(logItem == null) {
//					trace(this.owner, "owner for evidence item");
//					trace(this.parent, "parent for evidence item");
					(this.parent as VGroup).removeElement(this);
					return
				}
				var deleteEvent:IDEvent = new IDEvent(IDEvent.ERA_DELETE_LOG_ITEM, true);
				deleteEvent.data.logItem = logItem;
				dispatchEvent(deleteEvent);
			}

			protected function description_focusInHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				if(description.text == "description") {
					description.text = "";
					description.setStyle('color', '0x000000');
				}
			}


			protected function title_focusInHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				if(title.text == "name") {
					title.text = "";
					title.setStyle('color', '0x000000');
				}
			}


			protected function description_focusOutHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				if(description.text == "") {
					description.text = "description";
					description.setStyle('color', '0x888888');
				}
			}


			protected function title_focusOutHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				if(title.text == "") {
					title.text = "name";
					title.setStyle('color', '0x888888');
				}
			}

			protected function collectedCheckbox_clickHandler(event:MouseEvent):void
			{
				checkCollectedBox(collectedCheckbox.selected);
			}

			public function checkCollectedBox(value:Boolean):void {
				// TODO Auto-generated method stub
				
				var usefulEvent:IDEvent = new IDEvent(IDEvent.ERA_UPDATE_LOG, true);
				usefulEvent.data.logItemID = logItem.base_asset_id;
				usefulEvent.data.elementName = Model_ERALogItem.COLLECTED;
				usefulEvent.data.value = value;
				usefulEvent.data.evidenceItem = this;
				dispatchEvent(usefulEvent);
			}

			protected function returnedCheckbox_changeHandler(event:Event):void
			{
				checkForCollectionBox(returnedCheckbox.selected);
			}
			
			public function checkForCollectionBox(value:Boolean):void {
				collectedCheckbox.enabled = value;
				if(collectedCheckbox.selected && value == false) {
					// we need to uncheck it
					checkCollectedBox(false);
				}
				
				var usefulEvent:IDEvent = new IDEvent(IDEvent.ERA_UPDATE_LOG, true);
				usefulEvent.data.logItemID = logItem.base_asset_id;
				usefulEvent.data.elementName = Model_ERALogItem.FOR_COLLECTION;
				usefulEvent.data.value = value;
				usefulEvent.data.evidenceItem = this;
				dispatchEvent(usefulEvent);
			}


			protected function vgroup1_creationCompleteHandler(event:FlexEvent):void
			{
				(AppController.layout as Group).addEventListener(IDEvent.ERA_PROGRESS_EVENT, eraProgressOccured);
				(AppController.layout as Group).addEventListener(IDEvent.ERA_COMPLETE_EVENT, eraCompleteEvent);
				
				// move focus to dropdown
				evidenceType.setFocus();
			}

			private function eraProgressOccured(e:IDEvent):void {
				if(e.data.evidenceID != this.getID()) return;
				
				uploadProgress.visible = true;
				uploadButton.enabled = false;
				
				progressBar.showPercentage(e.data.percentage);
			}
			private function eraCompleteEvent(e:IDEvent):void {
				if(e.data.evidenceID != this.getID()) return;
				
				var fileID:Number = e.data.fileID;
				
				uploadButton.label = "View";
				uploadButton.enabled = true;
				//				uploadProgress.includeInLayout = false;
				uploadProgress.visible = false;
				logItem.uploaded = true;
				logItem.dataItemID = fileID;
				
			}

			protected function vgroup1_removedFromStageHandler(event:Event):void
			{
				(AppController.layout as Group).removeEventListener(IDEvent.ERA_NOTIFICATIONS_UPDATED, eraProgressOccured);
				this.removeEventListener(Event.REMOVED_FROM_STAGE, vgroup1_removedFromStageHandler);
			}

		]]>
	</fx:Script>

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:Resize heightTo="0" duration="200" id="resizeHide" />
		<s:Resize heightTo="30" duration="200" id="resizeShow" />
		
		<s:Fade duration="200" alphaFrom="0" alphaTo="1" id="fadeIn" />   
		<s:Fade duration="200" alphaFrom="1" alphaTo="0" id="fadeOut" />		
		
	</fx:Declarations>
	
	<s:HGroup verticalAlign="middle">
		<s:Button id="deleteEvidence" label="X" width="30" click="deleteEvidence_clickHandler(event)" cornerRadius="10" />
		<s:ComboBox id="evidenceType" width="200">
			<s:ArrayList>
				<fx:String>Audio</fx:String>
				<fx:String>Image</fx:String>
				<fx:String>PDF</fx:String>
				<fx:String>Office Documents</fx:String>
				<fx:String>Physical Object</fx:String>
				<fx:String>Research Description</fx:String>
				<fx:String>Research Statement</fx:String>
				<fx:String>Video</fx:String>
			</s:ArrayList>
		</s:ComboBox>
		<s:TextInput id="title" text="name" color="0x888888" focusIn="title_focusInHandler(event)" focusOut="title_focusOutHandler(event)" borderColor="0xDDDDDD"/>
		<s:TextInput id="description" width="300" text="description" color="0x888888" focusIn="description_focusInHandler(event)" focusOut="description_focusOutHandler(event)" borderColor="0xDDDDDD" />
		<s:Button label="Save" id="saveButton" click="saveButton_clickHandler(event)" cornerRadius="10"/>
		<s:HGroup id="actionGroup" visible="false" includeInLayout="false">
			<s:CheckBox label="Accepted" id="usefulCheckbox" change="usefulCheckbox_changeHandler(event)"/>
			<s:CheckBox label="Processed" id="processedCheckbox" enabled="false" click="processedCheckbox_clickHandler(event)"/>
			<s:Button label="Upload" id="uploadButton" click="uploadButton_clickHandler(event)" enabled="false" cornerRadius="10"/>
			<s:CheckBox id="returnedCheckbox" label="For Collection" change="returnedCheckbox_changeHandler(event)" />
			<s:CheckBox id="collectedCheckbox" label="Collected" click="collectedCheckbox_clickHandler(event)" enabled="false"/>
		</s:HGroup>
	</s:HGroup>
	<s:HGroup id="uploadProgress" width="100%" visible="false" showEffect="{resizeShow}" hideEffect="{resizeHide}" height="0" paddingTop="10" paddingBottom="20">
		<components:LoadingBar id="progressBar" width="100%" />
		<s:Button width="70" label="Cancel" id="cancelUploadButton" click="cancelUploadButton_clickHandler(event)" chromeColor="0xFFFFFF" cornerRadius="10"/>
	</s:HGroup>
</s:VGroup>
