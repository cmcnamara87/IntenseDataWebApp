<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="View.components.*" xmlns:components1="View.ERA.components.*">

	<fx:Script>
		<![CDATA[
			import Controller.IDEvent;
			import Controller.Utilities.AssetLookup;
			
			import Model.AppModel;
			import Model.Model_Base;
			import Model.Model_ERALogItem;
			
			import mx.controls.Alert;
			private var fileReference:FileReference;
			
			private var logItem:Model_ERALogItem;
			
			/*================================ EVENT LISTENERS ============================== */
			
			/**
			 * The Upload button was clicked.
			 */
			protected function uploadButton_clickHandler(event:MouseEvent):void
			{
				fileReference = new FileReference();
				fileReference.browse(AssetLookup.getFileTypes());
				fileReference.addEventListener(Event.SELECT, onFileSelect);

				uploadButton.label = "Uploaded";
				uploadButton.enabled = false;
			}
			
			/**
			 * A file for upload was selected
			 */
			private function onFileSelect(e:Event):void {
				uploadProgress.includeInLayout = true;
				uploadProgress.visible = true;
				
				
				var uploadEvent:IDEvent = new IDEvent(IDEvent.ERA_SAVE_FILE, true);
				uploadEvent.data.type = evidenceType.selectedItem;
				uploadEvent.data.title = title.text;
				uploadEvent.data.description = description.text;
				uploadEvent.data.evidenceItem = this;
				uploadEvent.data.fileReference = fileReference;
				
				uploadButton.enabled = false;
				
				dispatchEvent(uploadEvent);
//				AppModel.getInstance().startFileUpload(dataObject);
			}
			
			public function showComplete():void {
				uploadButton.label = "Upload Complete";
				uploadButton.enabled = false;
				uploadProgress.includeInLayout = false;
				uploadProgress.visible = false;
			}
			public function showProgress(percentage:Number):void {
				progressBar.showPercentage(percentage);
			}
			private function ioErrorHandler(e:IOError):void {
				
			}
			
			
			/**
			 * The cancel upload button was clicked
			 */
			protected function cancelUploadButton_clickHandler(event:MouseEvent):void
			{
				uploadProgress.includeInLayout = false;
				uploadProgress.visible = false;
			}

			/**
			 * The useful checkbox was ticked
			 */
			protected function usefulCheckbox_changeHandler(event:Event):void
			{
				if((event.target as CheckBox).selected == true) {
					// The useful box was checked
					processedCheckbox.enabled = true;
					uploadButton.enabled = false;
				} else {
					// The useful box has been unchecked
					processedCheckbox.enabled = false;
					uploadButton.enabled = false;
				}
				
				var usefulEvent:IDEvent = new IDEvent(IDEvent.ERA_UPDATE_LOG, true);
				usefulEvent.data.logItemID = logItem.base_asset_id;
				usefulEvent.data.elementName = "useful";
				usefulEvent.data.value = (event.target as CheckBox).selected;
				usefulEvent.data.evidenceItem = this;
				dispatchEvent(usefulEvent);
			}
			
			protected function processedCheckbox_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if((event.target as CheckBox).selected == true) {
					// The useful box was checked
					uploadButton.enabled = true;
				} else {
					// The useful box has been unchecked
					uploadButton.enabled = false;
				}
				
				var usefulEvent:IDEvent = new IDEvent(IDEvent.ERA_UPDATE_LOG, true);
				usefulEvent.data.logItemID = logItem.base_asset_id;
				usefulEvent.data.elementName = "processed";
				usefulEvent.data.value = (event.target as CheckBox).selected;
				usefulEvent.data.evidenceItem = this;
				dispatchEvent(usefulEvent);
				
			}


			/**
			 * The save button was clicked
			 */
			protected function saveButton_clickHandler(event:MouseEvent):void
			{
				// Disable the save button while we save
				saveButton.label = "Saving...";
				saveButton.enabled = false;
				
				// Pass the type, title and description to the controller and this item itself
				var evidenceSavedEvent:IDEvent = new IDEvent(IDEvent.ERA_SAVE_LOG_ITEM, true);
				evidenceSavedEvent.data.type = evidenceType.selectedItem;
				evidenceSavedEvent.data.title = title.text;
				evidenceSavedEvent.data.description = description.text;
				evidenceSavedEvent.data.evidenceItem = this;
				dispatchEvent(evidenceSavedEvent);
			}
			
			public function showCheckBoxes():void {
				saveButton.visible = false;
				saveButton.includeInLayout = false;
				actionGroup.visible = true;
				actionGroup.includeInLayout = true;
			}

			public function addLogItemData(logItem:Model_ERALogItem):void {
				
				this.logItem = logItem;
				
				showCheckBoxes();
				
				evidenceType.selectedItem = logItem.type;
				title.text = logItem.title;
				title.setStyle('color', '0x000000');
				description.text = logItem.description;
				description.setStyle('color', '0x000000');
				
				// Disable the text entry boxes, because theyh ave already been saved
				evidenceType.enabled = false;
				title.enabled = false;
				description.enabled = false;
				
				usefulCheckbox.selected = logItem.useful;
				if(usefulCheckbox.selected == true) {
					processedCheckbox.enabled = true;
				}
				if(processedCheckbox.selected == true) {
					uploadButton.enabled = true;
				}
				processedCheckbox.selected = logItem.processed;
				if(logItem.uploaded) {
					uploadButton.label = "Uploaded";
				} else {
					uploadButton.label = "Upload";
				}
				returnedCheckbox.selected = logItem.returned;
			}

			protected function deleteEvidence_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
			}

			protected function description_focusInHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				if(description.text == "description") {
					description.text = "";
					description.setStyle('color', '0x000000');
				}
			}


			protected function title_focusInHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				if(title.text == "title") {
					title.text = "";
					description.setStyle('color', '0x000000');
				}
			}


			protected function description_focusOutHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				if(description.text == "") {
					description.text = "description";
					description.setStyle('color', '0x888888');
				}
			}


			protected function title_focusOutHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				if(title.text == "") {
					title.text = "title";
					description.setStyle('color', '0x888888');
				}
			}




		]]>
	</fx:Script>

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:HGroup verticalAlign="middle">
		<s:Button id="deleteEvidence" label="X" width="30" click="deleteEvidence_clickHandler(event)"/>
		<s:DropDownList id="evidenceType" width="200">
			<s:ArrayList>
				<fx:String>Video</fx:String>
				<fx:String>Images</fx:String>
				<fx:String>Photos</fx:String>
				<fx:String>Document</fx:String>
				<fx:String>Physical Object</fx:String>
				<fx:String>Research Statement</fx:String>
			</s:ArrayList>
		</s:DropDownList>
		<s:TextInput id="title" text="title" color="0x888888" focusIn="title_focusInHandler(event)" focusOut="title_focusOutHandler(event)"/>
		<s:TextInput id="description" width="300" text="description" color="0x888888" focusIn="description_focusInHandler(event)" focusOut="description_focusOutHandler(event)"/>
		<s:Button label="Save" id="saveButton" click="saveButton_clickHandler(event)" />
		<s:HGroup id="actionGroup" visible="false" includeInLayout="false">
			<s:CheckBox label="Useful" id="usefulCheckbox" change="usefulCheckbox_changeHandler(event)"/>
			<s:CheckBox label="Processed" id="processedCheckbox" enabled="false" click="processedCheckbox_clickHandler(event)"/>
			<s:Button label="Upload" id="uploadButton" click="uploadButton_clickHandler(event)" enabled="false" />
			<s:CheckBox id="returnedCheckbox" label="Returned" />
		</s:HGroup>
	</s:HGroup>
	<s:HGroup id="uploadProgress" width="100%" visible="false" includeInLayout="false">
		<components1:LoadingBar id="progressBar" width="100%" />
		<s:Button width="50" label="X" id="cancelUploadButton" click="cancelUploadButton_clickHandler(event)"/>
	</s:HGroup>
</s:VGroup>
