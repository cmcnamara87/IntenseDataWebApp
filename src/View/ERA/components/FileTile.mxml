<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100" gap="15" buttonMode="true" 
		  mouseOver="vgroup1_mouseOverHandler(event)" 
		  mouseOut="vgroup1_mouseOutHandler(event)" 
		  mouseDown="vgroup1_mouseDownHandler(event)" 
		  mouseUp="vgroup1_mouseUpHandler(event)"
		  mouseMove="vgroup1_mouseMoveHandler(event)" xmlns:components="View.ERA.components.*"
		  creationComplete="vgroup1_creationCompleteHandler(event)"
		  removedFromStage="vgroup1_removedFromStageHandler(event)">

	<fx:Script>
		<![CDATA[
			import Controller.AppController;
			import Controller.Dispatcher;
			import Controller.ERA.CaseController;
			import Controller.IDEvent;
			import Controller.Utilities.AssetLookup;
			import Controller.Utilities.Auth;
			
			import Model.Model_ERAFile;
			
			import mx.core.IUIComponent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			
			private var _fileData:Model_ERAFile;
			
			[Bindable] 
			public var title:String = "";
			
			[Bindable]
			private var description:String = "";
			
			[Bindable]
			public var fileID:Number;
			
			[Bindable]
			public var type:String;
			
			[Bindable]
			private var ext:String;
			
			[Bindable]
			private var version:Number = 0;
			
			[Bindable]
			private var screeningCount:Number = 0;
			
			[Bindable]
			private var exhibitionCount:Number = 0;
			
			[Bindable]
			private var rootMetaType:String;
			
			[Bindable]
			private var checkedOut:Boolean = false;
			
			[Bindable]
			private var notificationCount:Number = 0;
			
			public function set fileData(fileData:Model_ERAFile):void {
				this._fileData = fileData;

				title =  fileData.title;
				description = fileData.description;
				fileID = fileData.base_asset_id;
				type = fileData.type;
				ext = fileData.fileExt;
				version = fileData.version;
				rootMetaType = fileData.rootMetaType;
				checkedOut = fileData.checkedOut;

				notificationCount = fileData.notificationCount;
				screeningCount = fileData.screeningCount;
				exhibitionCount = fileData.exhibitionCount;
			}
			
			[Bindable]
			public var dragEnabled:Boolean = true;
			
			private var mouseDown:Boolean = false;
		
			public function loadURL(id:Number):void {
//				if(rootMetaType == "image") {
//					icon.source = 'http://' + Recensio_Flex_Beta.serverAddress + ':' + Recensio_Flex_Beta.serverPort + '/mflux/icon.mfjp?_skey=' + Auth.getInstance().getSessionID() + '&id=' + fileID + '&version=0&size=100'
//				} else {
					icon.source = AssetLookup.getAssetImageClass(rootMetaType);
//				}
			}

			protected function vgroup1_mouseDownHandler(event:MouseEvent):void
			{
				mouseDown = true;
				
			}

			
			protected function vgroup1_mouseMoveHandler(event:MouseEvent):void
			{
				if(!dragEnabled) return;
				if(!mouseDown) return; // only do this if we are moving the mouse, after holding it down (aka dragging)
				var dragProxy:Image = new Image();
				dragProxy.height= 100;
				dragProxy.width= 100; 
				dragProxy.source = AssetLookup.getAssetImageClass(rootMetaType);
				
				DragManager.doDrag(event.currentTarget as IUIComponent, null, event, dragProxy);
				this.alpha = 0.5;
			}


			protected function vgroup1_mouseUpHandler(event:MouseEvent):void
			{
				this.alpha = 1;
				mouseDown = false;
				var showFileEvent:IDEvent = new IDEvent(IDEvent.ERA_SHOW_FILE, true);
				showFileEvent.data.fileID = fileID;
				trace("dispatching show file event");
				this.dispatchEvent(showFileEvent);
			}


			protected function vgroup1_mouseOverHandler(event:MouseEvent):void
			{
				this.alpha = 0.8;
				// TODO Auto-generated method stub
			}


			protected function vgroup1_mouseOutHandler(event:MouseEvent):void
			{
				this.alpha = 1;
				// TODO Auto-generated method stub
			}

			protected function vgroup1_creationCompleteHandler(event:FlexEvent):void
			{
				AppController.layout.addEventListener(IDEvent.ERA_NOTIFICATIONS_UPDATED, eraNotificationsUpdated);
			}

			private function eraNotificationsUpdated(e:Event):void {
				if(!_fileData) return; // we havnet set any room data info yet
				_fileData.updateNotificationCount();
				this.notificationCount = _fileData.notificationCount;
				notificationBadge.notificationCount = this.notificationCount;
			}
			

			protected function vgroup1_removedFromStageHandler(event:Event):void
			{
				AppController.layout.removeEventListener(IDEvent.ERA_NOTIFICATIONS_UPDATED, eraNotificationsUpdated);
				this.removeEventListener(Event.REMOVED_FROM_STAGE, vgroup1_removedFromStageHandler);
			}

		]]>
	</fx:Script>

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:Group width="100" height="100">
		<mx:Image id="icon" height="100" width="100" verticalAlign="middle" maintainAspectRatio="true" toolTip="{description}" alpha="{checkedOut ? 0.5 : 1}" />
		<components:NotificationBadge id="notificationBadge" left="75" notificationCount="{notificationCount}" />		
		<components:TickBadge horizontalCenter="0" />
	</s:Group>
	
	<s:Label text="{title}{version > 0 ? '_v' + version : ''}{screeningCount > 0 ? '_r' + screeningCount : ''}{exhibitionCount > 0 ? '_e' + exhibitionCount : ''} ({ext})" width="100%" textAlign="center" />
</s:VGroup>
