<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:components="View.ERA.components.*"
		  removedFromStage="vgroup1_removedFromStageHandler(event)">
	<fx:Script>
		<![CDATA[
			import Controller.AppController;
			import Controller.ERA.CaseController;
			import Controller.IDEvent;
			import Controller.Utilities.AssetLookup;
			import Controller.Utilities.Auth;
			
			import Model.Model_ERAConversation;
			import Model.Model_ERAFile;
			import Model.Model_ERARoom;
			import Model.Model_ERAUser;
			
			import View.ERA.components.FileTile;
			import View.ERA.components.RenameFileItem;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			
			import spark.components.Button;
			
			private var fileArray:Array = new Array(); // Stores all the forensic lab items
			
			
			public function addConversation(conversationArray):void {
				showConversationButton.label = "Comments (" + conversationArray.length + ")";
				conversationPanel.addConversation(conversationArray);
			}
			
			public function decreaseFileCount(decByNumber:Number):void {
				setupFileCountDisplay(fileGroup.numElements - 1,  Number(fileCount.text));
			}
			
			private function setupFileCountDisplay(fileCountNow:Number, expectedTotal:Number):void {
				// Set the X of Y file count
				currentFileCount.text = fileCountNow + " of ";
				fileCount.text = expectedTotal + "";
				fileCountLocked.text = expectedTotal + " Files";
				
				if(fileCountNow == expectedTotal) {
					moveFilesToExhibitionButton.enabled = true;
					moveFilesToExhibitionButton.setStyle('chromeColor', '0x0AAF00');
					moveFilesToExhibitionButton.setStyle('color', '0xFFFFFF');
					this.showFileCountBar("ready");
				} else if(fileCountNow >  expectedTotal) {
					this.showFileCountBar("exceeded");
					moveFilesToExhibitionButton.setStyle('chromeColor', '0xFFFFFF');
					moveFilesToExhibitionButton.setStyle('color', '0x000000');
					moveFilesToExhibitionButton.enabled = false;
					moveFilesToExhibitionButton.toolTip = "Too many files. Please adjust file quota.";
				} else {
					moveFilesToExhibitionButton.setStyle('chromeColor', '0xFFFFFF');
					moveFilesToExhibitionButton.setStyle('color', '0x000000');
					this.showFileCountBar("off");
					moveFilesToExhibitionButton.enabled = false;
					moveFilesToExhibitionButton.toolTip = "Expected File Quota not met";
				}
			}
			
			/**
			 * Add all the lot items to the display
			 */
			public function addFiles(fileArray:Array):void {
				
				this.fileArray = fileArray;
				
				fileGroup.removeAllElements();
				
				if(fileArray == null) {
					// We are still loading
					var label:Label = new Label();
					label.text = "Loading...";
					fileGroup.addElement(label);
					return;
				}
				
				setupFileCountDisplay(fileArray.length, CaseController.currentERACase.fileCount);
				 
				if(fileArray.length == 0) {
					var label:Label = new Label();
					label.text = "No Evidence Items Found.";
					fileGroup.addElement(label);
					return;
				}

				var totalFileSize:Number = 0;
				
				renameFiles.removeAllElements();
				for each(var file:Model_ERAFile in fileArray) {
					// Add up the total file size
					totalFileSize += file.fileSize;
					
					
					// Create the file tile
					var fileTile:FileTile = new FileTile();
					fileTile.roomType = Model_ERARoom.SCREENING_ROOM;
					fileTile.fileData = file;
					fileTile.loadURL(file.base_asset_id);
					fileGroup.addElement(fileTile);
					
					// asdf
					var renameFileItem:RenameFileItem = new RenameFileItem();
					renameFileItem.setModel(file);
					renameFiles.addElement(renameFileItem);
				}
				
				totalFileSizeLabel.text = Math.ceil(totalFileSize / 1024 / 1024) + " MB";
				if((totalFileSize / 1024 / 1024) < 1) {
					totalFileSizeLabel.text = "Less Than 1 MB";
				}
				if((Math.ceil(totalFileSize / 1024 / 1024)) > 30) {
					totalFileSizeLabel.setStyle('color', '0xFF0000');
				} else {
					totalFileSizeLabel.setStyle('color', '0x5e6469');
				}
				renderFileFilters();
			}
			
			/* Adds the file filters that are needed for these files to the display */
			private function renderFileFilters():void {
				typeFiltersButtons.removeAllElements();
				var allFilterButton:Button=  new Button();
				allFilterButton.label = "All";
				allFilterButton.setStyle("chromeColor", "0xFFFFFF");
				allFilterButton.setStyle("cornerRadius", "10");
				allFilterButton.addEventListener(MouseEvent.CLICK, filterButtonClicked);
				typeFiltersButtons.addElement(allFilterButton);
				
				for each(var file:Model_ERAFile in fileArray) {
					var typeFilterButton:Button=  new Button();
					typeFilterButton.label = file.type;
					typeFilterButton.setStyle("chromeColor", "0xFFFFFF");
					typeFilterButton.setStyle("cornerRadius", "10");
					typeFilterButton.addEventListener(MouseEvent.CLICK, filterButtonClicked);
					
					var found:Boolean = false;
					for(var i:Number = 0; i < typeFiltersButtons.numElements; i++) {
						var button:Button = typeFiltersButtons.getElementAt(i) as Button;
						if(button.label == file.type) found = true;
					}
					if(!found) {
						typeFiltersButtons.addElement(typeFilterButton);
					}
				}
			}
			
			private function filterButtonClicked(e:MouseEvent):void {
				var showOnlyType:String = (e.target as Button).label;
				
				if(showOnlyType == "All") {
					// Reveal all
					for(var i:Number = 0; i < fileGroup.numElements; i++) {
						var fileTile:FileTile = fileGroup.getElementAt(i) as FileTile;
						fileTile.visible = true;
						fileTile.includeInLayout = true;
					}
					return;
				}
				
				// Something behinds all, lets hide some of them				
				for(var i:Number = 0; i < fileGroup.numElements; i++) {
					var fileTile:FileTile = fileGroup.getElementAt(i) as FileTile;
					if(fileTile.type == showOnlyType) {
						fileTile.visible = true;
						fileTile.includeInLayout = true;
					} else {
						fileTile.visible = false;
						fileTile.includeInLayout = false;
					}
				}
			}
			
			protected function vgroup1_removedFromStageHandler(event:Event):void
			{
				for each(var fileTile:FileTile in fileGroup) {
					fileTile.destroyFileTile();
				}
				fileGroup.removeAllElements();
				typeFiltersButtons.removeAllElements();
				
				this.removeEventListener(Event.REMOVED_FROM_STAGE, vgroup1_removedFromStageHandler);
				fileArray = null;
			}
			
			protected function moveFilesToExhibitionButton_clickHandler(event:MouseEvent):void
			{
				// Lets check that all the files have been renamed
				// get all the renamed file names
				var allGood:Boolean = true;
				for(var i:Number = 0; i < renameFiles.numElements; i++) {
					var renameFileItem:RenameFileItem = renameFiles.getElementAt(i) as RenameFileItem;
					if(renameFileItem.getModel().title == "") {
						allGood = false;
						break;
					}
				}
				if(!(allGood && CaseController.currentERACase.downloadTitle != "")) {
					// all files / package hasnt been renamed
					var myAlert:Alert = Alert.show(
						"Not all files have been assigned a revised download name. Do you wish to proceed?", "Move Files", Alert.OK | Alert.CANCEL, null, function(e:CloseEvent):void {
							if (e.detail==Alert.OK) {
								moveAllFiles();
							}
						}, null, Alert.CANCEL);
					
				} else {
					// all files have been renamed
					// so lets move them
					moveAllFiles();
				}
			} 
			
			private function moveAllFiles():void {

					
				// Get together all the files we need to move
				var fileIDArray:Array = new Array();
				for(var i:Number = 0; i < fileGroup.numElements; i++) {
					trace("constructing file id array");
					var fileTile:FileTile = fileGroup.getElementAt(i) as FileTile;
					fileIDArray.push(fileTile.fileID);
				}
				
				var fileMoveEvent:IDEvent = new IDEvent(IDEvent.ERA_MOVE_ALL_FILES, true);
				fileMoveEvent.data.fileIDArray = fileIDArray;
				fileMoveEvent.data.moveToRoomType = Model_ERARoom.EXHIBIT;
				CaseController.currentERACase.libraryDownloaded = false;
				this.dispatchEvent(fileMoveEvent);
				
				fileGroup.removeAllElements();
				
				setupFileCountDisplay(0, Number(fileCount.text));
			}
			
			protected function renameFilesButton_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				caseFolderName.text = CaseController.currentERACase.downloadTitle;
				renamePopup.visible = !renamePopup.visible;
				renamePopup.includeInLayout = !renamePopup.includeInLayout;
			}
			
			protected function saveFileCount_clickHandler(event:MouseEvent):void
			{
				setupFileCountDisplay(fileGroup.numElements, Number(fileCount.text));
				
				var fileMoveEvent:IDEvent = new IDEvent(IDEvent.ERA_CHANGE_FILE_COUNT_FOR_CASE, true);
				fileMoveEvent.data.fileCount = fileCount.text;
				this.dispatchEvent(fileMoveEvent);
			}
			
			protected function saveRenamedFiles_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var folderName:String = caseFolderName.text;
				
				var files:Array = new Array();
				
				// get all the renamed file names
				var allGood:Boolean = true;
				for(var i:Number = 0; i < renameFiles.numElements; i++) {
					var renameFileItem:RenameFileItem = renameFiles.getElementAt(i) as RenameFileItem;
					trace("looking at  item", renameFileItem.getModel().title);
					if(renameFileItem.getModel().title == "") {
						AppController.layout.notificationBar.showError("Please fill in all package file names");
						allGood = false;
						break;
					}
					files.push(renameFileItem.getModel());
				}

				if(allGood) {
					CaseController.currentERACase.downloadTitle = caseFolderName.text;
					
					var renameFileEvent:IDEvent = new IDEvent(IDEvent.ERA_SAVE_PACKAGE_FILE_NAMES, true);
					renameFileEvent.data.folderName = folderName;
					renameFileEvent.data.files = files;
					this.dispatchEvent(renameFileEvent);
					renamePopup.visible = false;
					renamePopup.includeInLayout = false;
				}
			}
			
			protected function cancelRenamedFiles_clickHandler(event:MouseEvent):void
			{
				// reset them
				for(var i:Number = 0; i < renameFiles.numElements; i++) {
					var renameFileItem:RenameFileItem = renameFiles.getElementAt(i) as RenameFileItem;
					renameFileItem.reset();
				}
				
				
				renamePopup.visible = false;
				renamePopup.includeInLayout = false;
			}
			
			/**
			 * Shows the file quota bar
			 * types ["ready", "exceeded", "off"]
			 */
			private function showFileCountBar(type:String) {
				
				// Only do this if you are the admin
				if(!Auth.getInstance().isSysAdmin()) {
					return;
				}
				
				if(type == "ready" || type == "exceeded") {
					// show the bar
					fileCountBar.visible = true;
					fileCountBar.includeInLayout = true;
				} else if (type == "off") {
					fileCountBar.visible = false;
					fileCountBar.includeInLayout = false;
				}
				
				// setup the label
				switch(type) {
					case "ready":
						// set the colour
						fileCountBar.setStyle('backgroundColor', '0x0AAF00');
						message_text.text = "The allocated quota of Case files for the Review Lab has now been reached. You may now move your Case files to the Exhibition Room.";
						break;
					case "exceeded":
						// set the colour
						fileCountBar.setStyle('backgroundColor', '0xFF0000');
						message_text.text = "The allocated quota of Case files for the Review Lab has been exceeded.";
						break;
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:DropShadowFilter id="shadowy" distance="8" angle="90" color="0x000000" alpha="0.2" blurX="8" blurY="8" inner="false"/>
	</fx:Declarations>
	<!-- TITLE BAR WITH CREATION BUTTON -->
	<s:VGroup width="100%" height="100%" gap="0">
		<s:BorderContainer width="100%" backgroundColor="0xe4e5e6" height="80" borderVisible="false">
			<s:HGroup verticalAlign="middle" height="100%" width="100%" paddingLeft="20" paddingRight="20">
				<mx:Image source="{AssetLookup.ScreeningLabIcon}" alpha="0.8" width="48" height="40" horizontalAlign="center" maintainAspectRatio="true" verticalAlign="middle"  />
				<s:VGroup width="100%" paddingTop="10">
					<s:Label text="ERA {AppController.currentEraProject.year} / RM {CaseController.currentERACase.rmCode} - {CaseController.currentERACase.title}" fontSize="16" fontWeight="bold" color="0x828F9A">
					</s:Label>
					<s:Label text="RM {CaseController.currentERACase.rmCode} - Review Lab" fontSize="30" fontWeight="bold" color="0x5e6469" height="40" width="100%">
					</s:Label>
				</s:VGroup>
				<s:ToggleButton id="showConversationButton" chromeColor="0xFFFFFF" cornerRadius="10" label="Conversation (0)" height="30" />
				<s:Button id="renameFilesButton" visible="{Auth.getInstance().isSysAdmin()}" includeInLayout="{Auth.getInstance().isSysAdmin()}" chromeColor="0xFFFFFF" cornerRadius="10" height="30" label="Rename Case Files" click="renameFilesButton_clickHandler(event)"/>
				<s:Button id="moveFilesToExhibitionButton" enabled="false" visible="{Auth.getInstance().isSysAdmin()}" includeInLayout="{Auth.getInstance().isSysAdmin()}" chromeColor="0xFFFFFF" cornerRadius="10" label="Move Files to Exhibition Room →" height="30" click="moveFilesToExhibitionButton_clickHandler(event)" />
			</s:HGroup>
		</s:BorderContainer>
		<!-- END OF TITLE BAR WITH CREATION BUTTON -->
	
		
		<s:BorderContainer width="100%" height="40" borderVisible="false" backgroundColor="0xEEEFF1">
			<s:HGroup verticalAlign="middle" paddingBottom="10" paddingLeft="20" paddingRight="10" paddingTop="10">
				<!-- the file count display section -->
				<s:Label text="File Quota:" color="0x828F9A"/>
				<s:Label id="currentFileCount" color="0x828F9A" fontWeight="bold"/>
				<!-- the section seen by production manager or admin (lets them adjust the number) -->
				<s:HGroup verticalAlign="middle" visible="{Auth.getInstance().hasRoleForYear(Model_ERAUser.PRODUCTION_MANAGER, AppController.currentEraProject.year) || Auth.getInstance().isSysAdmin()}" 
						  includeInLayout="{Auth.getInstance().hasRoleForYear(Model_ERAUser.PRODUCTION_MANAGER, AppController.currentEraProject.year) || Auth.getInstance().isSysAdmin()}">
					<s:TextInput id="fileCount"  color="0x828F9A" fontWeight="bold" width="40" textAlign="center"/>
					<s:Label color="0x828F9A" fontWeight="bold" text="Files"/>
					<s:Button height="100%" label="Save" chromeColor="0xFFFFFF" cornerRadius="10" click="saveFileCount_clickHandler(event)"/>	
				</s:HGroup>
				<!-- The section seen by others (just a display of the count) -->
				<s:HGroup verticalAlign="middle" visible="{!(Auth.getInstance().hasRoleForYear(Model_ERAUser.PRODUCTION_MANAGER, AppController.currentEraProject.year) || Auth.getInstance().isSysAdmin())}" >
					<s:Label id="fileCountLocked" color="0x828F9A" fontWeight="bold" text="? Files"/>
				</s:HGroup>
				
				<s:Label paddingLeft="10" />
				
				<s:Label text="Total File Size:" color="0x828F9A"/>
				<s:Label id="totalFileSizeLabel" color="0xFF0000" fontWeight="bold"/>
				<s:Label text="Filter By Type:" color="0x828F9A"/>
				<s:HGroup id="typeFiltersButtons">
				</s:HGroup>
			</s:HGroup>
			
		</s:BorderContainer>
		
		<s:BorderContainer id="fileCountBar" width="100%" height="30" backgroundColor="0x00FF00" borderVisible="false" color="0xFFFFFF" visible="false" includeInLayout="false">
			<s:HGroup verticalAlign="middle" width="100%" height="100%" paddingLeft="10" paddingRight="10">
				<s:Label id="message_text" text="The allocated quota of files for the Review Lab has now been reached. You may now move your files to the Exhibition Room." width="100%"/>	
			</s:HGroup>
		</s:BorderContainer>
		
		<s:HGroup width="100%" height="100%" gap="0">
			<s:BorderContainer width="100%" height="100%" borderVisible="false">
				<s:Scroller width="100%" height="100%">
					<s:VGroup width="100%" height="100%" paddingBottom="20" paddingLeft="40" paddingRight="20" paddingTop="20">
						<s:TileGroup id="fileGroup" width="100%" height="100%" verticalGap="20" horizontalGap="20"/>	
					</s:VGroup>
					
				</s:Scroller>
			</s:BorderContainer>
			
			<!-- conversation part -->
			<components:ConversationPanel id="conversationPanel" width="{showConversationButton.selected ? 300 : 0}" />
		</s:HGroup>

	</s:VGroup>
	
	<s:VGroup id="renamePopup" includeInLayout="false" filters="{shadowy}" visible="false" width="500" maxHeight="600" paddingBottom="30" paddingLeft="10" paddingRight="10" paddingTop="30" horizontalCenter="0" verticalCenter="0">
		<s:BorderContainer width="100%" height="100%" backgroundColor="0xFFFFFF">
			<s:VGroup width="100%" height="100%">
				<s:VGroup width="100%" paddingBottom="10" paddingLeft="20" paddingRight="20" paddingTop="20">
					<s:Label text="Finalise the names of your Case files in preparation for the Exhibition Room" fontSize="30" fontWeight="bold" color="0x5e6469" paddingBottom="10" width="100%" />
					<s:Label width="100%" text="At this point, you can rename your Case files. If you choose not to rename your Case files, the original file name will remain." fontSize="12" color="0x5e6469" paddingBottom="20" />
					<s:HGroup verticalAlign="middle">
						<s:Label text="Exhibition Room - Folder Download Name:" />
						<s:TextInput id="caseFolderName" width="100%" />
					</s:HGroup>
				</s:VGroup>
				
				<mx:HRule width="100%"/>
				
				<s:Scroller width="100%" height="100%">
					<s:VGroup id="renameFiles" width="100%" height="100%" paddingLeft="20" paddingRight="20">
					</s:VGroup>	
				</s:Scroller>
				
				<mx:HRule width="100%"/>
				
				<s:HGroup width="100%" horizontalAlign="center" paddingLeft="20" paddingRight="20" paddingBottom="10" >
					<s:Button id="saveRenamedFiles" chromeColor="0xFFFFFF" cornerRadius="10" height="30" label="Save" click="saveRenamedFiles_clickHandler(event)" />
					<s:Button id="cancelRenamedFiles" chromeColor="0xFFFFFF" cornerRadius="10" height="30" label="Cancel" click="cancelRenamedFiles_clickHandler(event)"/>	
				</s:HGroup>
				
			</s:VGroup>

		</s:BorderContainer>
		
	</s:VGroup>
</s:Group>
