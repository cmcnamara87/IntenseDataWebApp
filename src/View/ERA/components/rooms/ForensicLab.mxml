<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" gap="0" xmlns:components="View.ERA.components.*">
	<fx:Script>
		<![CDATA[
			import Controller.AppController;
			import Controller.ERA.CaseController;
			import Controller.IDEvent;
			import Controller.Utilities.AssetLookup;
			import Controller.Utilities.Auth;
			
			import Model.Model_ERAConversation;
			import Model.Model_ERAFile;
			
			import View.ERA.components.Comment;
			import View.ERA.components.FileTile;
			
			import mx.core.IUIComponent;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			
			import spark.components.Button;
			
			private var fileArray:Array = new Array(); // Stores all the forensic lab items
			
			public function addConversation(conversationArray:Array):void {
				showConversationButton.label = "Comments (" + conversationArray.length + ")";
				conversationPanel.addConversation(conversationArray);
			}
			
			/**
			 * Add all the lot items to the display
			 */
			public function addFiles(fileArray:Array):void {
				
				this.fileArray = fileArray;
				
				hotFileGroup.removeAllElements();
				coldFileGroup.removeAllElements();
				
				if(fileArray == null) {
					// We are still loading
					var label:Label = new Label();
					label.text = "Loading...";
					hotFileGroup.addElement(label);
					return;
				}
				
				if(fileArray.length == 0) {
					var label:Label = new Label();
					label.text = "No Evidence Items Found.";
					hotFileGroup.addElement(label);
					return;
				}
				
				renderFilterButtons();
				
				for each(var file:Model_ERAFile in fileArray) {
					var fileTile:FileTile = new FileTile();
					fileTile.fileData = file;
					fileTile.loadURL(file.base_asset_id);
					if(file.hot) {
						hotFileGroup.addElement(fileTile);
					} else {
						coldFileGroup.addElement(fileTile);
					}
				}
			}
			
			private function renderFilterButtons():void {
				typeFiltersButtons.removeAllElements();
				var allFilterButton:Button=  new Button();
				allFilterButton.label = "All";
				allFilterButton.setStyle("chromeColor", "0xFFFFFF");
				allFilterButton.setStyle("cornerRadius", "10");
				allFilterButton.addEventListener(MouseEvent.CLICK, filterButtonClicked);
				typeFiltersButtons.addElement(allFilterButton);
				
				for each(var file:Model_ERAFile in fileArray) {
					var typeFilterButton:Button=  new Button();
					typeFilterButton.label = file.type;
					typeFilterButton.setStyle("chromeColor", "0xFFFFFF");
					typeFilterButton.setStyle("cornerRadius", "10");
					typeFilterButton.addEventListener(MouseEvent.CLICK, filterButtonClicked);
					
					var found:Boolean = false;
					for(var i:Number = 0; i < typeFiltersButtons.numElements; i++) {
						var button:Button = typeFiltersButtons.getElementAt(i) as Button;
						if(button.label == file.type) found = true;
					}
					if(!found) {
						typeFiltersButtons.addElement(typeFilterButton);
					}
				}
			}
			/** 
			 * The filter buttons was clicked, filter the files displayed 
			 */
			private function filterButtonClicked(e:MouseEvent):void {
				var showOnlyType:String = (e.target as Button).label;
				
				if(showOnlyType == "All") {
					// Reveal all
					for(var i:Number = 0; i < coldFileGroup.numElements; i++) {
						var fileTile:FileTile = coldFileGroup.getElementAt(i) as FileTile;
						fileTile.visible = true;
						fileTile.includeInLayout = true;
					}
					for(var i:Number = 0; i < hotFileGroup.numElements; i++) {
						var fileTile:FileTile = hotFileGroup.getElementAt(i) as FileTile;
						fileTile.visible = true;
						fileTile.includeInLayout = true;
					}
					return;
				}
				
				// Something behinds all, lets hide some of them				
				for(var i:Number = 0; i < hotFileGroup.numElements; i++) {
					var fileTile:FileTile = hotFileGroup.getElementAt(i) as FileTile;
					if(fileTile.type == showOnlyType) {
						fileTile.visible = true;
						fileTile.includeInLayout = true;
					} else {
						fileTile.visible = false;
						fileTile.includeInLayout = false;
					}
				}
				
				for(var i:Number = 0; i < coldFileGroup.numElements; i++) {
					var fileTile:FileTile = coldFileGroup.getElementAt(i) as FileTile;
					if(fileTile.type == showOnlyType) {
						fileTile.visible = true;
						fileTile.includeInLayout = true;
					} else {
						fileTile.visible = false;
						fileTile.includeInLayout = false;
					}
				}
			}

			protected function coldFileGroup_dragEnterHandler(event:DragEvent):void
			{
				(event.currentTarget as BorderContainer).setStyle('backgroundColor', '0xEFEFEF');
				DragManager.acceptDragDrop(event.currentTarget as IUIComponent);
				DragManager.showFeedback( DragManager.MOVE );
			}

			protected function coldFileGroup_dragExitHandler(event:DragEvent):void
			{
				(event.currentTarget as BorderContainer).setStyle('backgroundColor', '0xFFFFFF');
			}

			/**
			 * The file was dropped in the cold section
			 * Add it to the display, and tell the controller to move it
			 */
			protected function coldFileGroup_dragDropHandler(event:DragEvent):void
			{
				(event.currentTarget as BorderContainer).setStyle('backgroundColor', '0xFFFFFF');
				coldFileGroup.addElement(event.dragInitiator as FileTile);
				
				(event.dragInitiator as FileTile).hot = false;
				
				var makeColdEvent:IDEvent = new IDEvent(IDEvent.ERA_CHANGE_FILE_TEMPERATURE, true);
				makeColdEvent.data.hot = false;
				makeColdEvent.data.fileID = (event.dragInitiator as FileTile).fileID;
				
				this.dispatchEvent(makeColdEvent);
			}


			protected function hotFileGroup_dragDropHandler(event:DragEvent):void
			{
				(event.currentTarget as BorderContainer).setStyle('backgroundColor', '0xFFFFFF');
				hotFileGroup.addElement(event.dragInitiator as FileTile);
				
				(event.dragInitiator as FileTile).hot = true;
				
				var makeHotEvent:IDEvent = new IDEvent(IDEvent.ERA_CHANGE_FILE_TEMPERATURE, true);
				makeHotEvent.data.hot = true;
				makeHotEvent.data.fileID = (event.dragInitiator as FileTile).fileID;
				this.dispatchEvent(makeHotEvent);
				
			}


			protected function hotFileGroup_dragEnterHandler(event:DragEvent):void
			{
				(event.currentTarget as BorderContainer).setStyle('backgroundColor', '0xEFEFEF');
				DragManager.acceptDragDrop(event.currentTarget as IUIComponent);
				DragManager.showFeedback( DragManager.MOVE );
			}

			protected function bordercontainer1_dragExitHandler(event:DragEvent):void
			{
				(event.currentTarget as BorderContainer).setStyle('backgroundColor', '0xFFFFFF');
			}


			


			protected function searchInput_keyUpHandler(event:KeyboardEvent):void
			{
				var searchText:String = searchInput.text;
				
				if(searchText == "") {
					// Reveal all
					for(var i:Number = 0; i < coldFileGroup.numElements; i++) {
						var fileTile:FileTile = coldFileGroup.getElementAt(i) as FileTile;
						fileTile.visible = true;
						fileTile.includeInLayout = true;
					}
					for(var i:Number = 0; i < hotFileGroup.numElements; i++) {
						var fileTile:FileTile = hotFileGroup.getElementAt(i) as FileTile;
						fileTile.visible = true;
						fileTile.includeInLayout = true;
					}
					return;
				}
				
				// Something behinds all, lets hide some of them				
				for(var i:Number = 0; i < hotFileGroup.numElements; i++) {
					var fileTile:FileTile = hotFileGroup.getElementAt(i) as FileTile;
					if(fileTile.title.indexOf(searchText) != -1) {
						fileTile.visible = true;
						fileTile.includeInLayout = true;
					} else {
						fileTile.visible = false;
						fileTile.includeInLayout = false;
					}
				}
				
				for(var i:Number = 0; i < coldFileGroup.numElements; i++) {
					var fileTile:FileTile = coldFileGroup.getElementAt(i) as FileTile;
					if(fileTile.title.indexOf(searchText) != -1) {
						fileTile.visible = true;
						fileTile.includeInLayout = true;
					} else {
						fileTile.visible = false;
						fileTile.includeInLayout = false;
					}
				}
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<!-- TITLE BAR WITH CREATION BUTTON -->
	<s:BorderContainer width="100%" backgroundColor="0xe4e5e6" height="80" borderVisible="false">
		<s:HGroup verticalAlign="middle" height="100%" width="100%" paddingLeft="20" paddingRight="20">
			<mx:Image source="{AssetLookup.ForensicLabIcon}" alpha="0.8" width="48" height="40" horizontalAlign="center" maintainAspectRatio="true" verticalAlign="middle"  />
			<s:VGroup width="100%" paddingTop="10">
				<s:Label text="ERA {AppController.currentEraProject.year} / RM {CaseController.currentERACase.rmCode} - {CaseController.currentERACase.title}" fontSize="16" fontWeight="bold" color="0x828F9A">
				</s:Label>
				<s:Label text="RM {CaseController.currentERACase.rmCode} - Forensic Lab" fontSize="30" fontWeight="bold" color="0x5e6469" height="40" width="100%">
				</s:Label>
			</s:VGroup>
			<s:ToggleButton id="showConversationButton" chromeColor="0xFFFFFF" cornerRadius="10" label="Comments (0)" height="30" />
		</s:HGroup>
	</s:BorderContainer>
	<!-- END OF TITLE BAR WITH CREATION BUTTON -->
	
	<!-- Filter buttons -->
	<s:BorderContainer width="100%" height="40" borderVisible="false" backgroundColor="0xEEEFF1" id="filterButtonsGroup">
		<s:HGroup verticalAlign="middle" paddingBottom="10" paddingLeft="20" paddingRight="10" paddingTop="10" width="100%">
			<s:Label text="Search:" color="0x828F9A"/>
			<s:TextInput width="100%" borderColor="0xBBBBBB" id="searchInput" keyUp="searchInput_keyUpHandler(event)"/>
			<s:Label text="       Filter By Type:" color="0x828F9A"/>
			<s:HGroup id="typeFiltersButtons">
				<s:Label text="Loading..." color="0x828F9A"/>
			</s:HGroup>
		</s:HGroup>
	</s:BorderContainer>
	<!-- Filter buttons -->
	
	<s:HGroup width="100%" height="100%" gap="0">
		<!-- File browser part -->
		<s:BorderContainer width="100%" height="100%" borderVisible="false">
			<s:HGroup width="100%" height="100%" gap="0">

				<s:BorderContainer width="100%" height="100%" backgroundColor="0xFFFFFF" borderVisible="false"  dragDrop="hotFileGroup_dragDropHandler(event)"  dragExit="bordercontainer1_dragExitHandler(event)" dragEnter="hotFileGroup_dragEnterHandler(event)">
					<s:VGroup width="100%" height="100%">
						<s:BorderContainer backgroundColor="0xCCFFCC" width="100%" height="20" borderVisible="false" >
							<s:Label fontWeight="bold" color="0x7AC17E" verticalCenter="0" width="100%" text="Active"  textAlign="center" fontSize="11"/>
						</s:BorderContainer>
						<!--<mx:HRule width="100%" />-->
						
						<s:HGroup width="100%" height="100%" paddingLeft="50">
							<s:Scroller width="100%" height="100%">
								<s:TileGroup id="hotFileGroup" width="100%" height="100%" verticalGap="20" horizontalGap="20" />
							</s:Scroller>	
						</s:HGroup>
						
					</s:VGroup>
				</s:BorderContainer>
				<mx:VRule height="100%" />
				<s:BorderContainer width="500" height="100%" backgroundColor="0xFFFFFF" borderVisible="false" dragDrop="coldFileGroup_dragDropHandler(event)" dragExit="coldFileGroup_dragExitHandler(event)" dragEnter="coldFileGroup_dragEnterHandler(event)">
					<s:VGroup width="100%" height="100%" >
						<s:BorderContainer backgroundColor="0xCCCCCC" width="100%" height="20" borderVisible="false">
							<s:Label color="0x999999" fontWeight="bold" verticalCenter="0" width="100%" text="Inactive" textAlign="center" fontSize="11"/>	
						</s:BorderContainer>
						<!--<mx:HRule width="100%" />-->
						<s:Scroller width="100%" height="100%">
							<s:TileGroup id="coldFileGroup" width="100%" height="100%" verticalGap="20" horizontalGap="20"/>
						</s:Scroller>
					</s:VGroup>
				</s:BorderContainer>
				
			</s:HGroup>
		</s:BorderContainer>
		
		<!-- conversation part -->
		<components:ConversationPanel id="conversationPanel" width="{showConversationButton.selected ? 300 : 0}" />
	</s:HGroup>

</s:VGroup>
