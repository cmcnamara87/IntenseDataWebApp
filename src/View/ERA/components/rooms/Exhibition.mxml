<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" gap="0" xmlns:components="View.ERA.components.*"
		  removedFromStage="vgroup1_removedFromStageHandler(event)">
	<fx:Script>
		<![CDATA[
			import Controller.AppController;
			import Controller.ERA.CaseController;
			import Controller.IDEvent;
			import Controller.Utilities.AssetLookup;
			import Controller.Utilities.Auth;
			
			import Model.Model_ERAConversation;
			import Model.Model_ERAFile;
			import Model.Model_ERARoom;
			
			import View.ERA.components.FileTile;
			
			import mx.controls.Alert;
			
			import spark.components.Button;
			
			private var fileArray:Array = new Array(); // Stores all the forensic lab items
			
			/**
			 * Add all the lot items to the display
			 */
			public function addFiles(fileArray:Array):void {
				
				this.fileArray = fileArray;
				
				fileGroup.removeAllElements();
				
				if(fileArray == null) {
					// We are still loading
					var label:Label = new Label();
					label.text = "Loading...";
					fileGroup.addElement(label);
					return;
				}
				
				if(fileArray.length == 0) {
					var label:Label = new Label();
					label.text = "No Evidence Items Found.";
					fileGroup.addElement(label);
					return;
				}
				
				var totalFileSize:Number = 0;
				
				for each(var file:Model_ERAFile in fileArray) {
					// Add up the total file size
					totalFileSize += file.fileSize;
					
					
					// Create the file tile
					var fileTile:FileTile = new FileTile();
					fileTile.fileData = file;
					fileTile.dragEnabled = false;
					fileTile.loadURL(file.base_asset_id);
					fileGroup.addElement(fileTile);
				}
				
				totalFileSizeLabel.text = Math.ceil(totalFileSize / 1024 / 1024) + " MB";
				if((totalFileSize / 1024 / 1024) < 1) {
					totalFileSizeLabel.text = "Less Than 1 MB";
				}
				if((Math.ceil(totalFileSize / 1024 / 1024)) > 30) {
					totalFileSizeLabel.setStyle('color', '0xFF0000');
				} else {
					totalFileSizeLabel.setStyle('color', '0x5e6469');
				}
				renderFileFilters();
			}
			
			/* Adds the file filters that are needed for these files to the display */
			private function renderFileFilters():void {
				typeFiltersButtons.removeAllElements();
				var allFilterButton:Button=  new Button();
				allFilterButton.label = "All";
				allFilterButton.setStyle("chromeColor", "0xFFFFFF");
				allFilterButton.setStyle("cornerRadius", "10");
				allFilterButton.addEventListener(MouseEvent.CLICK, filterButtonClicked);
				typeFiltersButtons.addElement(allFilterButton);
				
				for each(var file:Model_ERAFile in fileArray) {
					var typeFilterButton:Button=  new Button();
					typeFilterButton.label = file.type;
					typeFilterButton.setStyle("chromeColor", "0xFFFFFF");
					typeFilterButton.setStyle("cornerRadius", "10");
					typeFilterButton.addEventListener(MouseEvent.CLICK, filterButtonClicked);
					
					var found:Boolean = false;
					for(var i:Number = 0; i < typeFiltersButtons.numElements; i++) {
						var button:Button = typeFiltersButtons.getElementAt(i) as Button;
						if(button.label == file.type) found = true;
					}
					if(!found) {
						typeFiltersButtons.addElement(typeFilterButton);
					}
				}
			}
			
			private function filterButtonClicked(e:MouseEvent):void {
				var showOnlyType:String = (e.target as Button).label;
				
				if(showOnlyType == "All") {
					// Reveal all
					for(var i:Number = 0; i < fileGroup.numElements; i++) {
						var fileTile:FileTile = fileGroup.getElementAt(i) as FileTile;
						fileTile.visible = true;
						fileTile.includeInLayout = true;
					}
					return;
				}
				
				// Something behinds all, lets hide some of them				
				for(var i:Number = 0; i < fileGroup.numElements; i++) {
					var fileTile:FileTile = fileGroup.getElementAt(i) as FileTile;
					if(fileTile.type == showOnlyType) {
						fileTile.visible = true;
						fileTile.includeInLayout = true;
					} else {
						fileTile.visible = false;
						fileTile.includeInLayout = false;
					}
				}
			}
			
			protected function vgroup1_removedFromStageHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				for each(var fileTile:FileTile in fileGroup) {
					fileTile.destroyFileTile();
				}
				fileGroup.removeAllElements();
				typeFiltersButtons.removeAllElements();
				
				this.removeEventListener(Event.REMOVED_FROM_STAGE, vgroup1_removedFromStageHandler);
				fileArray = null;
				
			}
			
			protected function moveFilesToReviewButton_clickHandler(event:MouseEvent):void
			{
				// Get together all the files we need to move
				var fileIDArray:Array = new Array();
				for(var i:Number = 0; i < fileGroup.numElements; i++) {
					var fileTile:FileTile = fileGroup.getElementAt(i) as FileTile;
					fileIDArray.push(fileTile.fileID);
					trace("constructing file id array", fileTile.fileID);
				}

				var fileMoveEvent:IDEvent = new IDEvent(IDEvent.ERA_MOVE_ALL_FILES, true);
				fileMoveEvent.data.fileIDArray = fileIDArray;
				fileMoveEvent.data.moveToRoomType = Model_ERARoom.SCREENING_ROOM;
				this.dispatchEvent(fileMoveEvent);
					
				fileGroup.removeAllElements();
			}
			
			protected function downloadFilesButton_clickHandler(event:MouseEvent):void
			{
				var downloadPackageEvent:IDEvent = new IDEvent(IDEvent.ERA_DOWNLOAD_PACKAGE, true);
				this.dispatchEvent(downloadPackageEvent);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<!-- TITLE BAR WITH CREATION BUTTON -->
	<s:BorderContainer width="100%" backgroundColor="0xe4e5e6" height="80" borderVisible="false">
		<s:HGroup verticalAlign="middle" height="100%" width="100%" paddingLeft="20" paddingRight="20">
			<mx:Image source="{AssetLookup.ExhibitionIcon}" alpha="0.8" width="48" height="40" horizontalAlign="center" maintainAspectRatio="true" verticalAlign="middle"  />
			<s:VGroup width="100%" paddingTop="10">
				<s:Label text="ERA {AppController.currentEraProject.year} / RM {CaseController.currentERACase.rmCode} - {CaseController.currentERACase.title}" fontSize="16" fontWeight="bold" color="0x828F9A">
				</s:Label>
				<s:Label text="RM {CaseController.currentERACase.rmCode} - Exhibition" fontSize="30" fontWeight="bold" color="0x5e6469" height="40" width="100%">
				</s:Label>
			</s:VGroup>
			<s:Button id="moveFilesToReviewButton" chromeColor="0xFFFFFF" cornerRadius="10" label="← Move All Files to Review Lab" height="30" click="moveFilesToReviewButton_clickHandler(event)" visible="{Auth.getInstance().isSysAdmin()}" includeInLayout="{Auth.getInstance().isSysAdmin()}"/>
			<s:Button id="downloadFilesButton" chromeColor="0xFFFFFF" cornerRadius="10" height="30" label="↓ Download Files" click="downloadFilesButton_clickHandler(event)" />
		</s:HGroup>
	</s:BorderContainer>
	<!-- END OF TITLE BAR WITH CREATION BUTTON -->
	
	<s:BorderContainer width="100%" height="40" borderVisible="false" backgroundColor="0xEEEFF1">
		<s:HGroup verticalAlign="middle" paddingBottom="10" paddingLeft="20" paddingRight="10" paddingTop="10">
			<s:Label text="Total File Size:" color="0x828F9A"/>
			<s:Label id="totalFileSizeLabel" color="0xFF0000" fontWeight="bold"/>
			<s:Label text="Filter By Type:" color="0x828F9A"/>
			<s:HGroup id="typeFiltersButtons">
			</s:HGroup>
		</s:HGroup>
		
	</s:BorderContainer>
	
	<s:HGroup width="100%" height="100%" gap="0">
		<s:BorderContainer width="100%" height="100%" borderVisible="false">
			<s:Scroller width="100%" height="100%">
				<s:VGroup width="100%" height="100%" paddingBottom="20" paddingLeft="40" paddingRight="20" paddingTop="20">
					<s:TileGroup id="fileGroup" width="100%" height="100%" verticalGap="20" horizontalGap="20"/>	
				</s:VGroup>
				
			</s:Scroller>
		</s:BorderContainer>
		
		<!-- conversation part -->
	</s:HGroup>
	
</s:VGroup>
