<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
		  removedFromStage="vgroup2_removedFromStageHandler(event)">
	<fx:Script>
		<![CDATA[
			import Controller.IDEvent;
			import Controller.Utilities.Auth;
			
			import Model.Model_ERANotification;
			
			import View.ERA.components.NotificationListItem;
			
			import mx.events.FlexEvent;
			
			private var keepAdding:Boolean = true;
			private var notificationArray:Array = null;
			private var notificationCounter:Number = 0;
			private var renderNumber:Number = 1; // how many notifications to render at a time
			
			
			/**
			 * Add notifications to the notificaiton panel
			 * 
			 * Notifications can be added at any time.
			 * 
			 * @param notificationsArray	Array of @see Model_notification
			 */
			public function addNotifications(notificationsArray:Array):void {
				// Store it for temporary rendering
				this.notificationArray = notificationsArray;
				
				trace("######## ADDING NOTIFICATIONS COUNT", notificationsArray.length);
				// If we are showing the panel, dont render any notifications!
				// we will wait until its invisible
				renderNotifications();
			}
			
			
			private function renderNotifications() {
				trace("######## RENDERING NOW");
//
//				// Setup buttons
//				showAllNotificationsButton.visible = false;
//				showAllNotificationsButton.includeInLayout = false;
				// make sure only the 'unread' button is clicked
//				showAllButton.selected = false;
//				showReadButton.selected = false;
//				showUnreadButton.selected = true;
				
				// Clear the current notifications
//				notificationList.removeAllElements();
				notificationList.percentHeight = 100;
				
				notificationCounter = 0;
				renderNumber = 1;
				// Add the cases
				addNotificationsToDisplay();
			}
			
			private function addNotificationsToDisplay():void {
				
				// Basically each time, we render a few more notifications at a time
				// it starts out at rendering 1, then 2, then 3 etc
				if(notificationCounter < notificationArray.length) {
					var notification:NotificationListItem = null;
					for(var i:Number = 0; i < renderNumber && (i + notificationCounter) < notificationArray.length; i++) {
						
						// Make a new notification item
						var notificationData:Model_ERANotification = notificationArray[notificationCounter + i] as Model_ERANotification;
						notification = new NotificationListItem();
						notification.notificationData = notificationData;
						notificationList.addElement(notification);
						
						/*if((showUnreadButton.selected && notificationData.read) || (showReadButton.selected && !notificationData.read)) {
							notification.visible = false;
							notification.includeInLayout = false;									
						}*/
						// Filter if we are in filter mode
						/*if(lastFilteredByID != 0) {
							filterNotifications(lastFilteredByID);
						}*/
					}
					
					notificationCounter += renderNumber;
					// increase the number we render, with a max of 5
					renderNumber = Math.min(5, ++renderNumber);
					
					if(notification) {
						// listen for the last one, of the batch we are rendering, to be finsihed
						notification.addEventListener(FlexEvent.CREATION_COMPLETE, notificationCreated, false, 0, true);
					} else {
						
					}					
				} else {
					trace("RENDERING FINISHED, SHOWING BADGES");
					notificationsFinishedRendering();
					
					setTimeout(function() {
						notificationsFinishedRendering();
					}, 120000);
				}
			}
			
			private function notificationsFinishedRendering():void {
				var notificationUpdatedEvent:IDEvent = new IDEvent(IDEvent.ERA_NOTIFICATIONS_UPDATED, true);
				loadingText.visible = false;
				loadingText.includeInLayout = false;
				loadMore.visible = true;
				loadMore.includeInLayout = true;
				dispatchEvent(notificationUpdatedEvent);
			}
			private function notificationCreated(e:FlexEvent):void {
				(e.target as NotificationListItem).removeEventListener(FlexEvent.CREATION_COMPLETE, notificationCreated);
				if(keepAdding) {
					addNotificationsToDisplay();
				}
			}	

			protected function vgroup2_removedFromStageHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				notificationList.removeAllElements();
				keepAdding = false;
				notificationArray = new Array();
			}


			protected function notificationtypes_changeHandler(event:Event):void
			{
				// TODO Auto-generated method stub
			}

		]]>
		
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:RadioButtonGroup id="notificationtypes"/>
	</fx:Declarations>
	<!-- TITLE BAR WITH CREATION BUTTON -->
	<s:BorderContainer width="100%" backgroundColor="0xe4e5e6" height="80" borderVisible="false">
		<s:HGroup verticalAlign="middle" height="100%" width="100%" paddingLeft="20" paddingRight="20">
			<s:VGroup width="100%">
				<s:HGroup width="100%">
					<s:Label text="User Profile" fontSize="30" fontWeight="bold" color="0x5e6469" height="40" width="100%">
						<s:filters>
							<s:DropShadowFilter distance="2" angle="90" color="0xFFFFFF" blurX="0" blurY="0"/>
						</s:filters>
					</s:Label>
					<!--<s:Button id="makeNewCase" label="Create New Case" cornerRadius="10" height="30" click="makeNewCase_clickHandler(event)"/>-->
				</s:HGroup>
			</s:VGroup>
		</s:HGroup>
	</s:BorderContainer>
	<!-- END OF TITLE BAR WITH CREATION BUTTON -->
	
	<s:Scroller width="100%" height="100%">
		<s:VGroup horizontalAlign="center" width="100%" height="100%">
			<!-- Content box -->
			<s:VGroup width="960" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" height="100%">
				
				<s:Label text="User Details" fontSize="20" fontWeight="bold" color="0x5e6469">
				</s:Label>
				<mx:HRule width="100%" />
				<s:VGroup width="100%">
					<s:HGroup width="100%">
						<s:Label text="QUT Email:" width="200"/>
						<s:Label text="{Auth.getInstance().getUserDetails().username}" />
					</s:HGroup>
					<s:HGroup width="100%">
						<s:Label text="First Name:" width="200" />
						<s:Label text="{Auth.getInstance().getUserDetails().firstName}" />
					</s:HGroup>
					<s:HGroup width="100%">
						<s:Label text="Last Name:" width="200" />
						<s:Label text="{Auth.getInstance().getUserDetails().lastName}" />	
					</s:HGroup>
				</s:VGroup>
				<s:VGroup width="100%">
					<s:HGroup width="100%" verticalAlign="middle">
						<s:Label text="New Password (Minimum 6 Characters):" width="200" />
						<s:TextInput id="newPassword" displayAsPassword="true" />
					</s:HGroup>
					<s:Button id="changePassword" label="Change Password"/>
				</s:VGroup>
				<s:HGroup verticalAlign="bottom">
					<s:Label text="All Notifications" fontSize="20" fontWeight="bold" color="0x5e6469" paddingTop="30" paddingRight="10">
					</s:Label>
					
					<s:RadioButton visible="false" includeInLayout="false" id="showAll" groupName="notificationtypes" label="All" value="{Model_ERANotification.SHOW_ALL}" selected="true" />
					<s:RadioButton visible="false" includeInLayout="false" id="showOthers" groupName="notificationtypes" label="Others Only" value="{Model_ERANotification.SHOW_OTHERS}" selected="false"/>	
					
				</s:HGroup>
				
				<mx:HRule width="100%" />

				<s:VGroup width="100%" id="notificationList" height="0">						
				</s:VGroup>	
				<s:Label paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" horizontalCenter="0" id="loadingText">
					Loading...
				</s:Label>
				<s:VGroup width="100%" paddingBottom="20" paddingLeft="20" paddingTop="20" paddingRight="20" horizontalAlign="center">
					<s:Button id="loadMore" label="Show More" visible="false"/>
				</s:VGroup>
				
			</s:VGroup>
			
		</s:VGroup>
	</s:Scroller>
</s:VGroup>
