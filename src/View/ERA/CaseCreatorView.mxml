<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:components="View.ERA.components.*"  width="100%" height="100%"
		 gap="0">

	<fx:Script>
		<![CDATA[
			import Model.Model_ERACase;
			import Model.Model_ERAUser;
			
			import View.ERA.components.UserListItem;
			
			import mx.collections.ArrayCollection;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			public var currentYear:String = "";
			
			// the selected reserachers for the case
			public var chosenResearchersArray:Array = new Array();
			// The selected production managers
			public var chosenProductionManagersArray:Array = new Array();
			// The selected team members
			public var chosenTeamMembersArray:Array = new Array();
			// the selected for's
			public var chosenForsArray:Array = new Array();
			// the selected categories
			public var chosenCategories:Array = new Array();
			
			/**
			 * Adds all the cases for the current ERA 
			 */
			public function addAllCases(caseArray:Array):void {
				
				if(caseArray.length == 0) {
					currentCases.dataProvider = new ArrayList(caseArray);
					enterCreationMode();
					return;
				}
				
				currentCases.enabled = true;
				deleteCaseButton.enabled = true;
				
				var dropdownData:ArrayCollection = new ArrayCollection();
				for each(var eraCase:Model_ERACase in caseArray) {
					var object:Object = new Object();
					object.data = eraCase;
					
					var researcher:Model_ERAUser = (eraCase.researchersArray[0] as Model_ERAUser);
					object.label = researcher.lastName + ", " + researcher.firstName + " (" + eraCase.rmCode + ")";
					dropdownData.addItem(object);
				}
				currentCases.dataProvider = dropdownData;
			}
			
			private function renderProductionManagers():void {
				productionManagersList.removeAllElements();
				for each(var user:Model_ERAUser in chosenProductionManagersArray) {
					var userListItem:UserListItem = new UserListItem();
					userListItem.username = user.username;
					userListItem.firstName = user.firstName;
					userListItem.lastName = user.lastName;
					productionManagersList.addElement(userListItem);
				}
			}
			
			/* RENDER FUNCTIONS */
			/**
			 * Render all the team members that have been selected 
			 */
			private function renderTeamMembers():void {
				productionTeamMemberList.removeAllElements();
				for each(var user:Model_ERAUser in chosenTeamMembersArray) {
					var userListItem:UserListItem = new UserListItem();
					userListItem.username = user.username;
					userListItem.firstName = user.firstName;
					userListItem.lastName = user.lastName;
					productionTeamMemberList.addElement(userListItem);
				}
			}
			
			/**
			 * Render all the reserachers selected
			 */
			private function renderResearchers():void {
				researcherList.removeAllElements();
				for each(var user:Model_ERAUser in chosenResearchersArray) {
					var userListItem:UserListItem = new UserListItem();
					userListItem.username = user.username;
					userListItem.firstName = user.firstName
					userListItem.lastName = user.lastName;
					researcherList.addElement(userListItem);
				}
			}
			/**
			 * Render all the FoRs chosen
			 */
			private function renderFor():void {
				forList.removeAllElements();
				for each(var forPair:Array in chosenForsArray) {
					var label:Label = new Label();
					label.text = forPair[Model_ERACase.FOR_CODE] + " " + forPair[Model_ERACase.PERCENTAGE] + "%";
					forList.addElement(label);
				}
			}
			
			/**
			 * Render all the categories
			 */
			private function renderCategories():void {
				categoryList.removeAllElements();
				for each(var category:String in chosenCategories) {
					var label:Label = new Label();
					label.text = category;
					categoryList.addElement(label);
				}
			}
			
			/**
			 * Show the details for a specific case in the view
			 */
			public function showCase(eraCase:Model_ERACase):void {
				// Show RM Code
				rmCode.text = eraCase.rmCode;
				
				// Show QUT School
				for(var i:Number = 0; i < qutSchool.dataProvider.length; i++) {
					var object:Object = (qutSchool.dataProvider as ArrayCollection).getItemAt(i);
					if(object.data == eraCase.qutSchool) {
						qutSchool.selectedIndex = i;
						break;
					}
				}
				
				// Show the Researchers
				chosenResearchersArray = eraCase.researchersArray;
				renderResearchers();
				
				// Show the FOR Codes
				chosenForsArray = eraCase.forArray;
				renderFor();
				
				// Add case categories
				chosenCategories = eraCase.categoryArray;
				renderCategories();
				
				// Set the title for the case
				title.text = eraCase.title;
				
				// Add all the production managers
				chosenProductionManagersArray = eraCase.productionManagerArray;
				renderProductionManagers();
				
				chosenTeamMembersArray = eraCase.productionTeamArray;
				renderTeamMembers();
			}
			
			public function addAllResearchers(userArray:Array):void {
				var dropdownData:ArrayCollection = new ArrayCollection();
				for each(var researcherUser:Model_ERAUser in userArray) {
					var object:Object = new Object();
					object.data = researcherUser;
					object.label = researcherUser.firstName + " " + researcherUser.lastName + " (" + researcherUser.username + ")";
					dropdownData.addItem(object);
				}
				allResearchers.dataProvider = dropdownData;
			}
			
			public function addAllProductionManagers(userArray:Array):void {
				var dropdownData:ArrayCollection = new ArrayCollection();
				for each(var productionManagerUser:Model_ERAUser in userArray) {
					var object:Object = new Object();
					object.data = productionManagerUser;
					object.label = productionManagerUser.firstName + " " + productionManagerUser.lastName + " (" + productionManagerUser.username + ")";
					dropdownData.addItem(object);
				}
				allProductionManagers.dataProvider = dropdownData;
			}
			
			public function addAllTeamMembers(userArray:Array):void {
				var dropdownData:ArrayCollection = new ArrayCollection();
				for each(var teamMemberUser:Model_ERAUser in userArray) {
					var object:Object = new Object();
					object.data = teamMemberUser;
					object.label = teamMemberUser.firstName + " " + teamMemberUser.lastName + " (" + teamMemberUser.username + ")";
					dropdownData.addItem(object);
				}
				allProductionTeamMembers.dataProvider = dropdownData;
			}

			private function enterCreationMode():void {
				// Disable the create new case button
				makeNewCase.enabled = false;
				
				// Disable the case selection dropdown list and delete case button
				currentCases.enabled = false;
				currentCases.selectedIndex = -1;
				deleteCaseButton.enabled = false;
				
				// Clear all values
				rmCode.text = "";
				qutSchool.selectedIndex = -1;
				researcherList.removeAllElements();
				forList.removeAllElements();
				categoryList.removeAllElements();
				title.text = "";
				productionManagersList.removeAllElements();
				productionTeamMemberList.removeAllElements();
				
				// Clear all stored stuff
				chosenResearchersArray = new Array();
				chosenProductionManagersArray = new Array();
				chosenTeamMembersArray = new Array();
				chosenForsArray = new Array();
				chosenCategories = new Array();
				
				// Show create and cancel button
				createCaseButton.visible = true;
				createCaseButton.includeInLayout = true;
				
				if(currentCases.dataProvider == null || currentCases.dataProvider.length == 0) {
					// We have nothing to go back to if we click cancel, so just disable it
					cancelButton.enabled = false;
				} else {
					cancelButton.enabled = true;
				}
					cancelButton.visible = true;
					cancelButton.includeInLayout = true;
				
				saveButton.visible = false;
				saveButton.includeInLayout = false;
			}
			public function exitCreationMode():void {
				makeNewCase.enabled = false;
				
				currentCases.enabled = true;
				deleteCaseButton.enabled = true;
				
				saveButton.visible = true;
				saveButton.includeInLayout = true;
				
				createCaseButton.visible = false;
				createCaseButton.includeInLayout = false;
				
				cancelButton.visible = false;
				cancelButton.includeInLayout = false;
			}
			protected function makeNewCase_clickHandler(event:MouseEvent):void
			{
				enterCreationMode();
			}


			protected function addResearcher_clickHandler(event:MouseEvent):void
			{
				if(allResearchers.selectedIndex == -1) return;
				
				// get out the researcher selected
				var researcherSelected:Model_ERAUser = allResearchers.selectedItem.data as Model_ERAUser;
				
				// Add it to the saved list
				chosenResearchersArray.push(researcherSelected);
				renderResearchers();
			}


			protected function addFor_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				var forPair:Array = new Array();
				forPair[Model_ERACase.FOR_CODE] = forCode.text;
				forPair[Model_ERACase.PERCENTAGE] = forPercentage.text;
				
				// save it and show it
				chosenForsArray.push(forPair);
				renderFor();
			}


			protected function addCategory_clickHandler(event:MouseEvent):void
			{
				if(category.selectedIndex == -1) return;
				
				// get out the researcher selected
				var categorySelected:String = category.selectedItem;
				
				// Add it to the saved list
				chosenCategories.push(categorySelected);
				renderCategories();
			}


			protected function addProductionManagerButton_clickHandler(event:MouseEvent):void
			{
				if(allProductionManagers.selectedIndex == -1) return;
				
				// get out the researcher selected
				var managerSelected:Model_ERAUser = allProductionManagers.selectedItem.data as Model_ERAUser;
				
				// Add it to the saved list
				chosenProductionManagersArray.push(managerSelected);
				renderProductionManagers();
			}


			protected function addTeamMemberButton_clickHandler(event:MouseEvent):void
			{
				if(allProductionTeamMembers.selectedIndex == -1) return;
				
				// get out the researcher selected
				var teamMemberSelected:Model_ERAUser = allProductionTeamMembers.selectedItem.data as Model_ERAUser;
				
				// Add it to the saved list
				chosenTeamMembersArray.push(teamMemberSelected);
				renderTeamMembers();
			}


			protected function forCode_focusInHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				if(forCode.text == "FoR Code (4 Digit)") {
					forCode.text = "";
				}
			}


			protected function forPercentage_focusOutHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				if(forPercentage.text == "") {
					forPercentage.text = "FoR Percentage";
				}
			}


			protected function forCode_focusOutHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				if(forCode.text == "") {
					forCode.text = "FoR Code (4 Digit)";
				}
			}


			protected function forPercentage_focusInHandler(event:FocusEvent):void
			{
				// TODO Auto-generated method stub
				if(forPercentage.text == "FoR Percentage") {
					forPercentage.text = "";
				}
			}


			protected function cancelButton_clickHandler(event:MouseEvent):void
			{
				exitCreationMode();
				currentCases.selectedIndex = 0;
				showCase(currentCases.selectedItem.data as Model_ERACase);
			}

		]]>
	</fx:Script>

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<!-- TITLE BAR WITH CREATION BUTTON -->
	<s:BorderContainer width="100%" backgroundColor="0xe4e5e6" height="80" borderVisible="false">
		<s:HGroup verticalAlign="middle" height="100%" width="100%" paddingLeft="20" paddingRight="20">
			<s:VGroup width="100%">
				<s:HGroup width="100%">
					<s:Label text="Case Creator {currentYear}" fontSize="30" fontWeight="bold" color="0x5e6469" height="40" width="100%">
						<s:filters>
							<s:DropShadowFilter distance="2" angle="90" color="0xFFFFFF" blurX="0" blurY="0"/>
						</s:filters>
					</s:Label>
					<s:Button id="makeNewCase" label="Create New Case" cornerRadius="10" height="30" click="makeNewCase_clickHandler(event)"/>
				</s:HGroup>
			</s:VGroup>
		</s:HGroup>
	</s:BorderContainer>
	<!-- END OF TITLE BAR WITH CREATION BUTTON -->
	
	<s:Scroller width="100%" height="100%">
		<s:VGroup horizontalAlign="center" width="100%">
			<!-- Content box -->
			<s:VGroup width="960" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10">
				
				<s:Label text="Current Case" fontSize="20" fontWeight="bold" color="0x5e6469">
				</s:Label>
				
				<s:HGroup width="100%" paddingBottom="20">
					<s:DropDownList id="currentCases" width="100%" change="{showCase(currentCases.selectedItem.data as Model_ERACase)}">
					</s:DropDownList>	
					<s:Button id="deleteCaseButton" label="Delete Case"/>
				</s:HGroup>
				<mx:HRule width="100%" chromeColor="0x000000" />
				
				<components:FormGroup title="RM Code">
					<components:content>
						<s:TextInput id="rmCode" borderAlpha="0.5" width="100%" />
						<s:VGroup width="100%">
						</s:VGroup>
					</components:content>
				</components:FormGroup>
			
				<components:FormGroup title="Case Title">
					<components:content>
						<s:TextInput id="title" borderAlpha="0.5" width="100%" />
					</components:content>
				</components:FormGroup>
				
				<components:FormGroup title="QUT School">
					<components:content>
						<s:DropDownList id="qutSchool" width="100%">
							<s:ArrayCollection>
								<fx:Object data="MECA" label="MECA" />
								<fx:Object data="SOD" label="SOD" />
							</s:ArrayCollection>
						</s:DropDownList>
					</components:content>
				</components:FormGroup>
				
				<components:FormGroup title="Researchers">
					<components:content>
						<s:HGroup width="100%">
							<s:DropDownList	id="allResearchers" width="100%">
								<s:ArrayList>
									<fx:String>Reseracher Name</fx:String>
									<fx:String>Reseracher Name</fx:String>
								</s:ArrayList>
							</s:DropDownList>
							<s:Button id="addResearcher" label="Add Researcher" click="addResearcher_clickHandler(event)" />	
						</s:HGroup>
						<s:VGroup id="researcherList" width="100%">
						</s:VGroup>
					</components:content>
				</components:FormGroup>
				
				
				<components:FormGroup title="FoR">
					<components:content>
						<s:HGroup width="100%">
							<s:TextInput id="forCode" text="FoR Code (4 Digit)" borderAlpha="0.5" width="100%" focusIn="forCode_focusInHandler(event)" focusOut="forCode_focusOutHandler(event)"/>
							<s:TextInput id="forPercentage" text="FoR Percentage" borderAlpha="0.5" width="100%" focusIn="forPercentage_focusInHandler(event)" focusOut="forPercentage_focusOutHandler(event)"/>
							<s:Label text="%" />
							<s:Button id="addFor" label="Add FoR" click="addFor_clickHandler(event)" />
						</s:HGroup>
						<s:VGroup id="forList">
						</s:VGroup>
					</components:content>
				</components:FormGroup>
				
				<components:FormGroup title="Category">
					<components:content>
						<s:HGroup width="100%">
							<s:DropDownList id="category" width="100%" dataProvider="{new ArrayList(Model_ERACase.CATEGORY_ARRAY)}"/>
							<s:Button id="addCategory" label="Add Category" click="addCategory_clickHandler(event)"/>
						</s:HGroup>
						<s:VGroup id="categoryList">
							
						</s:VGroup>
					</components:content>
				</components:FormGroup>
				
				
				
				<components:FormGroup title="Production Manager">
					<components:content>
						<s:HGroup width="100%">
							<s:DropDownList width="100%" id="allProductionManagers" />
							<s:Button label="Add Production Mananger" id="addProductionManagerButton" click="addProductionManagerButton_clickHandler(event)"/>
						</s:HGroup>
						<s:VGroup id="productionManagersList" width="100%">
						</s:VGroup>
					</components:content>
				</components:FormGroup>
				

				<components:FormGroup title="Production Team Member">
					<components:content>
						<s:HGroup width="100%"> 
							<s:DropDownList width="100%" id="allProductionTeamMembers" />
							<s:Button label="Add Production Team Member" id="addTeamMemberButton" click="addTeamMemberButton_clickHandler(event)" />
						</s:HGroup>
						<s:VGroup id="productionTeamMemberList" width="100%">
						</s:VGroup>
					</components:content>
				</components:FormGroup>
				
				<s:HGroup id="buttonGroup">
					<s:Button label="Save Changes" chromeColor="0x8FAFF7" id="saveButton" />
					<s:Button label="Save Case"  chromeColor="0x8FAFF7" id="createCaseButton" visible="false" includeInLayout="false" />
					<s:Button label="Cancel" id="cancelButton" visible="false" includeInLayout="false" click="cancelButton_clickHandler(event)"/>
				</s:HGroup>
				
				
			</s:VGroup>
		</s:VGroup>
	</s:Scroller>
</s:VGroup>
